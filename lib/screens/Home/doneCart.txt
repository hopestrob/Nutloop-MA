import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:nutloop_ecommerce/helper/api.dart';
import 'package:nutloop_ecommerce/helper/config_size.dart';
// import 'package:nutloop_ecommerce/provider/cart.dart';
import 'package:nutloop_ecommerce/provider/products_provider.dart';
import 'package:nutloop_ecommerce/screens/Auth/constants.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';


import '../../provider/cart.dart';
import 'checkOutAddCard.dart';
import 'checkout.dart';
import 'homepage.dart';
import 'widget/progressdialog.dart';


class CartScreen extends StatefulWidget {
  @override
  _CartScreenState createState() => _CartScreenState();
}

class _CartScreenState extends State<CartScreen> {

 @override
  void didChangeDependencies() {
         WidgetsBinding.instance.addPostFrameCallback((_){
    Provider.of<Cart>(context, listen: false).getSavedCartItemsList();  
  });
    super.didChangeDependencies();
  }

//  @override
//   void initState() {
//      WidgetsBinding.instance.addPostFrameCallback((_){
//     Provider.of<Cart>(context, listen: false).getSavedCartItemsList();  
//   });
//     super.initState();
//   }
  @override
  Widget build(BuildContext context) {
     final getCartItem = Provider.of<Cart>(context).getCartItem;
    //  print('this is ${getCartItem.data?.items?.length == 0}');
    Size size = MediaQuery.of(context).size;
    return Scaffold(
        body: Padding(
      padding: const EdgeInsets.only(top: 20.0),
      child:  
      
      getCartItem.data?.items?.length == null ? Center(
                child:
                CupertinoActivityIndicator(
                  radius: 12,
                )) : getCartItem.data?.items?.length == 0 ? Column(
              children: [
                Container(
                  margin: EdgeInsets.all(8.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Center(
                        child: Text('My Cart',
                            style: TextStyle(
                                color: kPrimaryColor,
                                fontSize: 20.0,
                                fontWeight: FontWeight.bold)),
                      ),
                    ],
                  ),
                ),
                // Spacer(),
                line(context),
                SizedBox(height: size.height * 0.150),
                Expanded(
                  flex: 1,
                  child: Text(
                    'Your Cart is Empty',
                    style: TextStyle(fontSize: 20.0),
                  ),
                ),
                Expanded(
                  flex: 3,
                  child: SvgPicture.asset(
                    "asset/cart.svg",
                    height: size.width * 0.330,
                    color: kBrandColor,
                  ),
                ),
                // SizedBox(height: size.height * 0.150),
                Container(
                  margin: EdgeInsets.all(5.0 * SizeConfig.widthMultiplier),
                  width: 95 * SizeConfig.widthMultiplier,
                  padding: EdgeInsets.all(10.0),
                  // width: size.width / 1.2,
                  decoration: BoxDecoration(
                      color: kPrimaryColor,
                      borderRadius: BorderRadius.circular(5.0)),
                  child: FlatButton(
                    onPressed: () async {
                      SharedPreferences prefs =
                          await SharedPreferences.getInstance();
                      var authNames = prefs.getString('authName');
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (context) =>
                                  Homepage(authName: authNames)));
                    },
                    child: Text(
                      'Start Shopping',
                      style: TextStyle(color: Colors.white),
                    ),
                  ),
                ),
                SizedBox(height: size.height * 0.020),
              ],
            ): Consumer<Cart>(
                            builder: (_, cart, child) =>
                            Column(
              children: <Widget>[
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 15, vertical: 8),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: <Widget>[
                      Padding(
                        padding: const EdgeInsets.only(left: 8.0),
                        child: Text(
                          "My Cart",
                          style: TextStyle(
                              fontSize: 20,
                              color: kPrimaryColor,
                              fontWeight: FontWeight.bold),
                        ),
                      ),
                      Spacer(),
                      OrderButton(cartIdLength: cart.getCartItem.data?.items?.length, totalAmount:Provider.of<Cart>(context).getCartItem.data?.total ?? 0)
                    ],
                  ),
                ),
                SizedBox(height: size.height * 0.010),
                Divider(
                  color: Colors.grey,
                  height: 1.0,
                ),
                Align(
                    alignment: Alignment.topLeft,
                    child: Padding(
                      padding: const EdgeInsets.only(
                          left: 20.0, bottom: 5.0, top: 10.0),
                      child: Row(
                        children: [
                        Text(
                                "${cart.getCartItem.data?.items?.length ?? 0} items: Total(Excluding delivery charges)",
                                style:
                                    TextStyle(fontSize: 13, color: greyColor3)),
                          
                          Text("N${Provider.of<Cart>(context).getCartItem.data?.total ?? 0.0}",
                              style:
                                  TextStyle(fontSize: 13, color: kBrandColor)),
                        ],
                      ),
                    )),
                Expanded(
                  child: 
                  // Consumer<Cart>(
                  //     builder: (_, savedCartItem, child) =>
                      ListView.builder(
                        itemCount: cart.getCartItem.data?.items?.length ?? 0,
                       itemBuilder: (_, index){
                           var image =
                    json.decode(cart.getCartItem.data.items[index].product.images);
                    // print(image);
                            final prod =
                                cart.getCartItem.data.items[index].product;
                            return Card(
                              child: Column(
                                children: [
                                  Row(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.center,
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    children: [
                                      Row(
                                        children: [
                                          Container(
                                            margin:
                                                EdgeInsets.only(right: 15.0),
                                            width: 120,
                                            height: 120,
                                            child: Image.network(
                                                "${Api.imageUrl}${image.map((e) => e.toString()).join()}",
                                                loadingBuilder: (BuildContext context, Widget child,
                                        ImageChunkEvent loadingProgress) {
                                      if (loadingProgress == null) return child;
                                      return Center(
                                        child: CupertinoActivityIndicator(
                                          radius : loadingProgress.expectedTotalBytes != null
                                              ? loadingProgress.cumulativeBytesLoaded /
                                                  loadingProgress.expectedTotalBytes
                                              : null,
                                        ),
                                      );
                                    },
                                                ),
                                            // decoration: BoxDecoration(
                                            //     image: DecorationImage(
                                            //         image: NetworkImage(
                                            //             "${Api.imageUrl}${image.map((e) => e.toString()).join()}"),
                                            //         fit: BoxFit.cover)),
                                          ),
                                          Column(
                                            crossAxisAlignment:
                                                CrossAxisAlignment.start,
                                            children: [
                                              Container(
                                                width: 130.0,
                                                child: Text(prod.name,
                                                    overflow:
                                                        TextOverflow.ellipsis,
                                                    style: TextStyle(
                                                        fontSize: 16.0,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                        color: Colors.grey)),
                                              ),
                                              SizedBox(
                                                height: 5.0,
                                              ),
                                              Text(
                                                '#${int.parse(cart.getCartItem.data.items.where((e) => e.id == cart.getCartItem.data.items[index].id).map((e) => e.quantity).toList().join())*double.parse(cart.getCartItem.data.items.where((e) => e.id == cart.getCartItem.data.items[index].id).map((e) => e.product.prices.where((e) =>e.unitId ==cart.getCartItem.data.items[index].mUnitId).where((e) =>e.id == cart.getCartItem.data.items[index].priceId).map((e) => e.priceRegular).join()).join())}/${prod.prices.where((e) => e.unit.id == cart.getCartItem.data.items[index].unit.id).map((e) => e.unit.abbreviation).join()}',
                                                style: TextStyle(
                                                    color: Colors.grey,
                                                    fontSize: 12.0),
                                              ),
                                              SizedBox(
                                                height: 25.0,
                                              ),
                                              Row(
                                                // crossAxisAlignment: CrossAxisAlignment.,
                                                children: [
                                                  Container(
                                                    height: 38.0,
                                                    decoration: BoxDecoration(
                                                        border: Border.all(
                                                            color: kPrimaryColor
                                                                .withOpacity(
                                                                    .3)),
                                                        borderRadius:
                                                            BorderRadius
                                                                .circular(
                                                                    10.0)),
                                                    child: Row(
                                                      children: [
                                                        InkWell(
                                                          onTap: ()async{
                                                       showDialog(context: context,
                                                              builder: (BuildContext context){
                                                                Future.delayed(Duration(seconds: 5),(){
                                                                    Navigator.pop(context);
                                                                });
                                                                return ProgressDialog(message: "Please Wait..",);
                                                                
                                                              } 
                                                              
                                                            ).then((_) {
                                                            // async{
                                                              //  bool suc = await 
                                                               Provider.of<Cart>(context, listen: false).updateCart(
                                                                  cart.getCartItem.data.items[index].id,
                                                                  cart.getCartItem.data.items[index].quantity-1,
                                                                  cart.getCartItem.data.items[index].productId
                                                                );
                                                            } 
                                                            );
                                                            
                                                    
                                                          },
                                                             child: Container(
                                                              // padding: EdgeInsets.only(top:5.0),
                                                              width: 40.0,
                                                              height: 50,
                                                              decoration:
                                                                  BoxDecoration(
                                                                borderRadius: BorderRadius.only(
                                                                    topLeft: Radius
                                                                        .circular(
                                                                            10.0),
                                                                    bottomLeft: Radius
                                                                        .circular(
                                                                            10.0)),
                                                                color: kPrimaryColor
                                                                    .withOpacity(
                                                                        .3),
                                                                // border: Border.all(color: kPrimaryColor.withOpacity(.3))
                                                              ),
                                                              child: Icon(
                                                                  Icons.remove,
                                                                  color:
                                                                      kPrimaryColor)),
                                                        ),
                                                        Container(
                                                            width: 40.0,
                                                            child: Text(
                                                              "${Provider.of<Cart>(context).getCartItem.data.items[index].quantity}",
                                                              // "${savedCartItem.getCartItem[index].quantity} ${Provider.of<Cart>(context, listen:false).getQuantity}",
                                                              textAlign:
                                                                  TextAlign
                                                                      .center,
                                                              style: TextStyle(
                                                                  fontSize:
                                                                      18.0,
                                                                  fontWeight:
                                                                      FontWeight
                                                                          .bold),
                                                            )),
                                                        InkWell(
                                                          onTap: ()async{
                                                       showDialog(context: context,
                                                              builder: (BuildContext context){
                                                                Future.delayed(Duration(seconds: 5),(){
                                                                    Navigator.pop(context);
                                                                });
                                                                return ProgressDialog(message: "Please Wait..",);
                                                                
                                                              } 
                                                              
                                                            ).then((_) {
                                                            // async{
                                                              //  bool suc = await 
                                                               Provider.of<Cart>(context, listen: false).updateCart(
                                                                  cart.getCartItem.data.items[index].id,
                                                                  cart.getCartItem.data.items[index].quantity+1,
                                                                  cart.getCartItem.data.items[index].productId
                                                                );
                                                            } 
                                                            );
                                                            
                                                    
                                                          },
                                                          child:
                                                           Container(
                                                              width: 40.0,
                                                              height: 50,
                                                              decoration:
                                                                  BoxDecoration(
                                                                borderRadius: BorderRadius.only(
                                                                    topRight: Radius
                                                                        .circular(
                                                                            10.0),
                                                                    bottomRight: Radius
                                                                        .circular(
                                                                            10.0)),
                                                                color: kPrimaryColor
                                                                    .withOpacity(
                                                                        .3),
                                                                // border: Border.all(color: kPrimaryColor)
                                                              ),
                                                              child: Icon(
                                                                  Icons.add,
                                                                  color:
                                                                      kPrimaryColor)),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                ],
                                              )
                                            ],
                                          ),
                                        ],
                                      ),
                                      Container(
                                          margin: EdgeInsets.only(right: 20.0),
                                          padding: EdgeInsets.all(5.0),
                                          decoration: BoxDecoration(
                                              color: kPrimaryColor,
                                              border: Border.all(
                                                  // width: 3.0,
                                                  color: kPrimaryColor),
                                              borderRadius: BorderRadius.all(
                                                  Radius.circular(30.0))),
                                          child: InkWell(
                                              onTap: () async{

                                                showDialog(context: context,
                                                              builder: (BuildContext context){
                                                                Future.delayed(Duration(seconds: 5),(){
                                                                    Navigator.pop(context);
                                                                });
                                                                return ProgressDialog(message: "Please Wait..",);
                                                                
                                                              } 
                                                              
                                                            ).then((_) {
                                                            // async{
                                                              //  bool suc = await 
                                                              Provider.of<Cart>(context, listen: false).deleteCart(cart.getCartItem.data.items[index].id);
                                                            } 
                                                            );


                                              },
                                              child: Icon(
                                                  FontAwesomeIcons.trash,
                                                  color: Colors.white)))
                                    ],
                                  )
                                ],
                              ),
                            );
                          })),
                // ),
              ],
            ),
    )
          )
    );
  }
}

class OrderButton extends StatefulWidget {
  final int cartIdLength;
  // final int productId;
  // final int unitId;
  final int totalAmount;
  OrderButton({this.totalAmount, this.cartIdLength});

  @override
  _OrderButtonState createState() => _OrderButtonState();
}

class _OrderButtonState extends State<OrderButton> {
  // final CartModel carts = CartModel();

  @override
  Widget build(BuildContext context) {
    return Container(
        width: 150,
        decoration: BoxDecoration(
            color: kPrimaryColor, borderRadius: BorderRadius.circular(10.0)),
        child: FlatButton(
            onPressed: () {
              if(this.widget.cartIdLength > 0){
            Navigator.push(
              context,
              MaterialPageRoute(
                  builder: (context) => CheckOutPage(
                        totalAmount: widget.totalAmount,
                      )));
              }else{
                print('No Item in Cart');
              }
              
            },
            child: Text(
              "Check out",
              style: TextStyle(color: Colors.white),
            )));
  }
}







import 'dart:convert';
import 'dart:async';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:nutloop_ecommerce/helper/api.dart';
import 'package:nutloop_ecommerce/helper/config_size.dart';
import 'package:nutloop_ecommerce/screens/Auth/constants.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:nutloop_ecommerce/model/cartModel.dart';

import '../../provider/cart.dart';
import 'checkOutAddCard.dart';
import 'checkout.dart';
import 'homepage.dart';
import 'widget/progressdialog.dart';

class CartScreen extends StatefulWidget {

  @override
  _CartScreenState createState() => _CartScreenState();
}

class _CartScreenState extends State<CartScreen> {

  //  Future<CartModel> _future;
   StreamController _streamCartItem;


loadPosts() async {
    Provider.of<Cart>(context, listen: false).getSavedCartItemsList().then((res) async {
      _streamCartItem.add(res);
      return res;
    });
  }
  @override
  void initState() {
    _streamCartItem = new StreamController();
    loadPosts();
    // _future = Provider.of<Cart>(context, listen: false).getSavedCartItemsList();
    super.initState();
  }

  @override
  void dispose() {
    _streamCartItem.close();
    super.dispose();
  }

  // void didChangeDependencies() {
  //    Provider.of<Cart>(context).getSavedCartItemsList();
  //   super.didChangeDependencies();
  // }

  @override
  Widget build(BuildContext context) {
    final getCartItem = Provider.of<Cart>(context).getCartItem;
    // Future<CartModel> _future = Cart().getSavedCartItemsList();
    Size size = MediaQuery.of(context).size;
    return Scaffold(
        body: Padding(
            padding: const EdgeInsets.only(top: 20.0),
            child: StreamBuilder(
               stream: _streamCartItem.stream,
              // Provider.of<Cart>(context, listen: false)
              //     .getSavedCartItemsList(),
              builder: (BuildContext context, AsyncSnapshot snapshot) {
                if (snapshot.hasData) {
                  return getCartItem.data?.items?.length == null
                      ? Center(
                          child: CupertinoActivityIndicator(
                            radius: 12,
                          ),
                        )
                      : Container(
                          child: getCartItem.data?.items?.length == 0
                              ? Column(
                                  children: [
                                    Container(
                                      margin: EdgeInsets.all(8.0),
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.center,
                                        children: [
                                          Center(
                                            child: Text('My Cart',
                                                style: TextStyle(
                                                    color: kPrimaryColor,
                                                    fontSize: 20.0,
                                                    fontWeight:
                                                        FontWeight.bold)),
                                          ),
                                        ],
                                      ),
                                    ),
                                    // Spacer(),
                                    line(context),
                                    SizedBox(height: size.height * 0.150),
                                    Expanded(
                                      flex: 1,
                                      child: Text(
                                        'Your Cart is Empty',
                                        style: TextStyle(fontSize: 20.0),
                                      ),
                                    ),
                                    Expanded(
                                      flex: 3,
                                      child: SvgPicture.asset(
                                        "asset/cart.svg",
                                        height: size.width * 0.330,
                                        color: kBrandColor,
                                      ),
                                    ),
                                    // SizedBox(height: size.height * 0.150),
                                    Container(
                                      margin: EdgeInsets.all(
                                          5.0 * SizeConfig.widthMultiplier),
                                      width: 95 * SizeConfig.widthMultiplier,
                                      padding: EdgeInsets.all(10.0),
                                      // width: size.width / 1.2,
                                      decoration: BoxDecoration(
                                          color: kPrimaryColor,
                                          borderRadius:
                                              BorderRadius.circular(5.0)),
                                      child: FlatButton(
                                        onPressed: () async {
                                          SharedPreferences prefs =
                                              await SharedPreferences
                                                  .getInstance();
                                          var authNames =
                                              prefs.getString('authName');
                                          Navigator.push(
                                              context,
                                              MaterialPageRoute(
                                                  builder: (context) =>
                                                      Homepage(
                                                          authName:
                                                              authNames)));
                                        },
                                        child: Text(
                                          'Start Shopping',
                                          style: TextStyle(color: Colors.white),
                                        ),
                                      ),
                                    ),
                                    SizedBox(height: size.height * 0.020),
                                  ],
                                )
                              : Consumer<Cart>(
                                  builder: (_, cart, child) => Column(
                                    children: <Widget>[
                                      Padding(
                                        padding: EdgeInsets.symmetric(
                                            horizontal: 15, vertical: 8),
                                        child: Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.spaceAround,
                                          crossAxisAlignment:
                                              CrossAxisAlignment.end,
                                          children: <Widget>[
                                            Padding(
                                              padding: const EdgeInsets.only(
                                                  left: 8.0),
                                              child: Text(
                                                "My Cart",
                                                style: TextStyle(
                                                    fontSize: 20,
                                                    color: kPrimaryColor,
                                                    fontWeight:
                                                        FontWeight.bold),
                                              ),
                                            ),
                                            Spacer(),
                                            OrderButton(
                                                cartIdLength: cart.getCartItem
                                                    .data?.items?.length,
                                                totalAmount:
                                                    Provider.of<Cart>(context)
                                                            .getCartItem
                                                            .data
                                                            ?.total ??
                                                        0)
                                          ],
                                        ),
                                      ),
                                      SizedBox(height: size.height * 0.010),
                                      Divider(
                                        color: Colors.grey,
                                        height: 1.0,
                                      ),
                                      Align(
                                          alignment: Alignment.topLeft,
                                          child: Padding(
                                            padding: const EdgeInsets.only(
                                                left: 20.0,
                                                bottom: 5.0,
                                                top: 10.0),
                                            child: Row(
                                              children: [
                                                Text(
                                                    "${cart.getCartItem.data?.items?.length ?? 0} items: Total(Excluding delivery charges)",
                                                    style: TextStyle(
                                                        fontSize: 13,
                                                        color: greyColor3)),
                                                Text(
                                                    "N${Provider.of<Cart>(context).getCartItem.data?.total ?? 0.0}",
                                                    style: TextStyle(
                                                        fontSize: 13,
                                                        color: kBrandColor)),
                                              ],
                                            ),
                                          )),
                                      Expanded(
                                          child:
                                              // Consumer<Cart>(
                                              //     builder: (_, savedCartItem, child) =>
                                              ListView.builder(
                                                  itemCount: cart
                                                          .getCartItem
                                                          .data
                                                          ?.items
                                                          ?.length ??
                                                      0,
                                                  itemBuilder: (_, index) {
                                                    var image = json.decode(cart
                                                        .getCartItem
                                                        .data
                                                        .items[index]
                                                        .product
                                                        .images);
                                                    // print(image);
                                                    final prod = cart
                                                        .getCartItem
                                                        .data
                                                        .items[index]
                                                        .product;
                                                    return Card(
                                                      child: Column(
                                                        children: [
                                                          Row(
                                                            crossAxisAlignment:
                                                                CrossAxisAlignment
                                                                    .center,
                                                            mainAxisAlignment:
                                                                MainAxisAlignment
                                                                    .spaceBetween,
                                                            children: [
                                                              Row(
                                                                children: [
                                                                  Container(
                                                                    margin: EdgeInsets.only(
                                                                        right:
                                                                            15.0),
                                                                    width: 120,
                                                                    height: 120,
                                                                    child: Image
                                                                        .network(
                                                                      "${Api.imageUrl}${image.map((e) => e.toString()).join()}",
                                                                      loadingBuilder: (BuildContext context,
                                                                          Widget
                                                                              child,
                                                                          ImageChunkEvent
                                                                              loadingProgress) {
                                                                        if (loadingProgress ==
                                                                            null)
                                                                          return child;
                                                                        return Center(
                                                                          child:
                                                                              CupertinoActivityIndicator(
                                                                            radius: loadingProgress.expectedTotalBytes != null
                                                                                ? loadingProgress.cumulativeBytesLoaded / loadingProgress.expectedTotalBytes
                                                                                : null,
                                                                          ),
                                                                        );
                                                                      },
                                                                    ),
                                                                    // decoration: BoxDecoration(
                                                                    //     image: DecorationImage(
                                                                    //         image: NetworkImage(
                                                                    //             "${Api.imageUrl}${image.map((e) => e.toString()).join()}"),
                                                                    //         fit: BoxFit.cover)),
                                                                  ),
                                                                  Column(
                                                                    crossAxisAlignment:
                                                                        CrossAxisAlignment
                                                                            .start,
                                                                    children: [
                                                                      Container(
                                                                        width:
                                                                            130.0,
                                                                        child: Text(
                                                                            prod
                                                                                .name,
                                                                            overflow: TextOverflow
                                                                                .ellipsis,
                                                                            style: TextStyle(
                                                                                fontSize: 16.0,
                                                                                fontWeight: FontWeight.bold,
                                                                                color: Colors.grey)),
                                                                      ),
                                                                      SizedBox(
                                                                        height:
                                                                            5.0,
                                                                      ),
                                                                      Text(
                                                                        '#${int.parse(cart.getCartItem.data.items.where((e) => e.id == cart.getCartItem.data.items[index].id).map((e) => e.quantity).toList().join()) * double.parse(cart.getCartItem.data.items.where((e) => e.id == cart.getCartItem.data.items[index].id).map((e) => e.product.prices.where((e) => e.unitId == cart.getCartItem.data.items[index].mUnitId).where((e) => e.id == cart.getCartItem.data.items[index].priceId).map((e) => e.priceRegular).join()).join())}/${prod.prices.where((e) => e.unit.id == cart.getCartItem.data.items[index].unit.id).map((e) => e.unit.abbreviation).join()}',
                                                                        style: TextStyle(
                                                                            color:
                                                                                Colors.grey,
                                                                            fontSize: 12.0),
                                                                      ),
                                                                      SizedBox(
                                                                        height:
                                                                            25.0,
                                                                      ),
                                                                      Row(
                                                                        // crossAxisAlignment: CrossAxisAlignment.,
                                                                        children: [
                                                                          Container(
                                                                            height:
                                                                                38.0,
                                                                            decoration:
                                                                                BoxDecoration(border: Border.all(color: kPrimaryColor.withOpacity(.3)), borderRadius: BorderRadius.circular(10.0)),
                                                                            child:
                                                                                Row(
                                                                              children: [
                                                                                InkWell(
                                                                                  onTap: () async {
                                                                                    showDialog(
                                                                                        context: context,
                                                                                        builder: (BuildContext context) {
                                                                                          Future.delayed(Duration(seconds: 5), () {
                                                                                            Navigator.pop(context);
                                                                                          });
                                                                                          return ProgressDialog(
                                                                                            message: "Please Wait..",
                                                                                          );
                                                                                        }).then((_) {
                                                                                      // async{
                                                                                      //  bool suc = await
                                                                                      Provider.of<Cart>(context, listen: false).updateCart(cart.getCartItem.data.items[index].id, cart.getCartItem.data.items[index].quantity - 1, cart.getCartItem.data.items[index].productId);
                                                                                    }).then((_) {
                                                                                      // Navigator.pop(context);
                                                                                      Provider.of<Cart>(context, listen: false).getSavedCartItemsList();
                                                                                    });
                                                                                  },
                                                                                  child: Container(
                                                                                      // padding: EdgeInsets.only(top:5.0),
                                                                                      width: 40.0,
                                                                                      height: 50,
                                                                                      decoration: BoxDecoration(
                                                                                        borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), bottomLeft: Radius.circular(10.0)),
                                                                                        color: kPrimaryColor.withOpacity(.3),
                                                                                        // border: Border.all(color: kPrimaryColor.withOpacity(.3))
                                                                                      ),
                                                                                      child: Icon(Icons.remove, color: kPrimaryColor)),
                                                                                ),
                                                                                Container(
                                                                                    width: 40.0,
                                                                                    child: Text(
                                                                                      "${Provider.of<Cart>(context).getCartItem.data.items[index].quantity}",
                                                                                      // "${savedCartItem.getCartItem[index].quantity} ${Provider.of<Cart>(context, listen:false).getQuantity}",
                                                                                      textAlign: TextAlign.center,
                                                                                      style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
                                                                                    )),
                                                                                InkWell(
                                                                                  onTap: () async {
                                                                                    showDialog(
                                                                                        context: context,
                                                                                        builder: (BuildContext context) {
                                                                                          Future.delayed(Duration(seconds: 5), () {
                                                                                            Navigator.pop(context);
                                                                                          });
                                                                                          return ProgressDialog(
                                                                                            message: "Please Wait..",
                                                                                          );
                                                                                        }).then((_) {
                                                                                      // async{
                                                                                      //  bool suc = await
                                                                                      Provider.of<Cart>(context, listen: false).updateCart(cart.getCartItem.data.items[index].id, cart.getCartItem.data.items[index].quantity + 1, cart.getCartItem.data.items[index].productId);
                                                                                    }).then((_) {
                                                                                      // Navigator.pop(context);
                                                                                      Provider.of<Cart>(context, listen: false).getSavedCartItemsList();
                                                                                    });
                                                                                  },
                                                                                  child: Container(
                                                                                      width: 40.0,
                                                                                      height: 50,
                                                                                      decoration: BoxDecoration(
                                                                                        borderRadius: BorderRadius.only(topRight: Radius.circular(10.0), bottomRight: Radius.circular(10.0)),
                                                                                        color: kPrimaryColor.withOpacity(.3),
                                                                                        // border: Border.all(color: kPrimaryColor)
                                                                                      ),
                                                                                      child: Icon(Icons.add, color: kPrimaryColor)),
                                                                                ),
                                                                              ],
                                                                            ),
                                                                          ),
                                                                        ],
                                                                      )
                                                                    ],
                                                                  ),
                                                                ],
                                                              ),
                                                              Container(
                                                                  margin: EdgeInsets
                                                                      .only(
                                                                          right:
                                                                              20.0),
                                                                  padding:
                                                                      EdgeInsets
                                                                          .all(
                                                                              5.0),
                                                                  decoration: BoxDecoration(
                                                                      color: kPrimaryColor,
                                                                      border: Border.all(
                                                                          // width: 3.0,
                                                                          color: kPrimaryColor),
                                                                      borderRadius: BorderRadius.all(Radius.circular(30.0))),
                                                                  child: InkWell(
                                                                      onTap: () {
                                                                        showDialog(
                                                                            context:
                                                                                context,
                                                                            builder:
                                                                                (BuildContext context) {
                                                                              Future.delayed(Duration(seconds: 5), () {
                                                                                Navigator.pop(context);
                                                                              });
                                                                              return ProgressDialog(
                                                                                message: "Please Wait..",
                                                                              );
                                                                            }).then((_) {
                                                                          // async{
                                                                          //  bool suc = await

                                                                          Provider.of<Cart>(context, listen: false).deleteCart(cart
                                                                              .getCartItem
                                                                              .data
                                                                              .items[index]
                                                                              .id);
                                                                        }).then((_) {
                                                                          // Navigator.pop(context);
                                                                          Provider.of<Cart>(context, listen: false)
                                                                              .getSavedCartItemsList();
                                                                        });
                                                                      },
                                                                      child: Icon(FontAwesomeIcons.trash, color: Colors.white)))
                                                            ],
                                                          )
                                                        ],
                                                      ),
                                                    );
                                                  })),
                                      // ),
                                    ],
                                  ),
                                ),
                        );
                } else {
                  return Center(
                    child: CupertinoActivityIndicator(
                      radius: 12,
                    ),
                  );
                }
              },
            )));
  }
}

class OrderButton extends StatefulWidget {
  final int cartIdLength;
  // final int productId;
  // final int unitId;
  final int totalAmount;
  OrderButton({this.totalAmount, this.cartIdLength});

  @override
  _OrderButtonState createState() => _OrderButtonState();
}

class _OrderButtonState extends State<OrderButton> {
  // final CartModel carts = CartModel();

  @override
  Widget build(BuildContext context) {
    return Container(
        width: 150,
        decoration: BoxDecoration(
            color: kPrimaryColor, borderRadius: BorderRadius.circular(10.0)),
        child: FlatButton(
            onPressed: () {
              if (this.widget.cartIdLength > 0) {
                Navigator.push(
                    context,
                    MaterialPageRoute(
                        builder: (context) => CheckOutPage(
                              totalAmount: widget.totalAmount,
                            )));
              } else {
                print('No Item in Cart');
              }
            },
            child: Text(
              "Check out",
              style: TextStyle(color: Colors.white),
            )));
  }
}



correct and work check out package

import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:nutloop_ecommerce/helper/api.dart';
import 'package:nutloop_ecommerce/provider/auth_provider.dart';
import 'package:nutloop_ecommerce/provider/cart.dart';
import 'package:nutloop_ecommerce/screens/Auth/constants.dart';
import 'package:paystack_manager/paystack_manager.dart';
import 'package:provider/provider.dart';

import 'addDeliveryAddress.dart';
import 'checkOutAddCard.dart';
import 'successfulOrder.dart';
import 'widget/bottomModalLocation.dart';
import '../Users/addressbook.dart';

class CheckOutPage extends StatefulWidget {
  final int totalAmount;
  CheckOutPage({this.totalAmount});

  @override
  _CheckOutPageState createState() => _CheckOutPageState();
}

class _CheckOutPageState extends State<CheckOutPage> {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
   int addressIdFromList;
  @override
  void didChangeDependencies() {
    Provider.of<Cart>(context).getSavedCartItemsList();
    super.didChangeDependencies();
  }


   void _awaitReturnValueFromSecondScreen(BuildContext context) async {
    // start the SecondScreen and wait for it to finish with a result
    final result = await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => AddressBook(),
        ));
    // after the SecondScreen result comes back update the Text widget with it
    setState(() {
      addressIdFromList = result;
    });
    print('This is address $addressIdFromList');
  }


//  @override
//   void initState() {
//      WidgetsBinding.instance.addPostFrameCallback((_){
//     Provider.of<Cart>(context, listen: false).getSavedCartItemsList();
//   });
//     super.initState();
//   }
  @override
  Widget build(BuildContext context) {
      Provider.of<Authentication>(context, listen: false).getAddressBookDetails(addressIdFromList);
    // final result = Provider.of<Authentication>(context, listen: false).getAddressBookDetailDetail;
    // print('this is result ${result.street}  $addressIdFromList');
    final cart = Provider.of<Cart>(context, listen: false);
    return Scaffold(
        resizeToAvoidBottomInset: false,
        backgroundColor: greyColor4,
        key: _scaffoldKey,
        body: SafeArea(
            child: Container(
                child: ListView(children: <Widget>[
          Card(
            color: Colors.white,
            child: Padding(
              padding:
                  const EdgeInsets.only(top: 20.0, bottom: 20.0, left: 10.0),
              child: Row(
                children: [
                  InkWell(
                      onTap: () {
                        Navigator.of(context).pop();
                      },
                      child: Icon(Icons.arrow_back_ios,
                          size: 30, color: greyColor2)),
                  SizedBox(width: 100.0),
                  Center(
                    child: Text('Checkout',
                        style: TextStyle(
                            color: kBrandColor,
                            fontSize: 20.0,
                            fontWeight: FontWeight.bold)),
                  ),
                ],
              ),
            ),
          ),
          // Text('my Card'),
          Card(
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Padding(
                    padding: const EdgeInsets.only(left: 8.0, right: 8.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Padding(
                          padding:
                              const EdgeInsets.only(top: 8.0, bottom: 20.0),
                          child: Text('My Cart',
                              style: TextStyle(
                                  fontWeight: FontWeight.bold, fontSize: 16.0)),
                        ),
                        Padding(
                          padding: const EdgeInsets.only(top: 8.0, bottom: 8.0),
                          child: Text('View All',
                              style: TextStyle(
                                  color: kBrandColor, fontSize: 16.0)),
                        ),
                      ],
                    ),
                  ),
                  Container(
                    height: 100.0,
                    width: double.infinity,
                    padding: EdgeInsets.all(8.0),
                    child: ListView(
                      scrollDirection: Axis.horizontal,
                      children: new List.generate(
                          cart.getCartItem.data?.items?.length ?? 0, (index) {
                        var image = json.decode(
                            cart.getCartItem.data.items[index].product.images);
                        return Container(
                            margin: EdgeInsets.all(5.0),
                            decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(100.0)),
                            child: Image.network(
                                "${Api.imageUrl}${image.map((e) => e.toString()).join()}"));
                      }).toList(),
                    ),
                  ),
                ],
              ),
            ),
          ),

          Card(
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                children: [
                  Provider.of<Authentication>(context).getAddressBookDetail.id != null
                      ? 
                      Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Text('Delivery Address',
                                      style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          fontSize: 16.0)),
                                ),
                                InkWell(
                                  onTap: () {
                                   _awaitReturnValueFromSecondScreen(context);
                                  },
                                  child: Row(
                                    children: [
                                      Container(
                                          margin: EdgeInsets.all(15.0),
                                          padding: EdgeInsets.all(2.0),
                                          decoration: BoxDecoration(
                                              color:
                                                  Colors.green.withOpacity(.1),
                                              borderRadius: BorderRadius.all(
                                                  Radius.circular(30.0)),
                                              border: Border.all(
                                                  color: kBrandColor,
                                                  width: 2)),
                                          child: Padding(
                                              padding: const EdgeInsets.only(
                                                  left: 10.0,
                                                  right: 10.0,
                                                  top: 3,
                                                  bottom: 3),
                                              child: Text(
                                                'Change Address',
                                                style: TextStyle(
                                                    color: kBrandColor),
                                              )))
                                    ],
                                  ),
                                ),
                              ],
                            ),
                            Provider.of<Authentication>(context)
                                        .getAddressBookDetail
                                        .id ==
                                    null
                                ? SizedBox()
                                : Consumer<Authentication>(
                                    builder: (_, authUser, child) => Text(
                                        '${authUser.getAddressBookDetail.houseNo.toString()}, ${authUser.getAddressBookDetail.street.toString()}, ${authUser.getAddressBookDetail.city.toString()}')),
                            SizedBox(height: 20.0),
                          ],
                        )
                      : 
                      Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Padding(
                              padding: const EdgeInsets.all(8.0),
                              child: Text('Delivery Address *',
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      fontSize: 16.0)),
                            ),
                            InkWell(
                              onTap: () {
                                 _awaitReturnValueFromSecondScreen(context);
                              },
                              child: Row(
                                children: [
                                  Container(
                                      margin: EdgeInsets.all(15.0),
                                      padding: EdgeInsets.all(2.0),
                                      decoration: BoxDecoration(
                                          color: Colors.green.withOpacity(.1),
                                          borderRadius: BorderRadius.all(
                                              Radius.circular(30.0)),
                                          border: Border.all(
                                              color: kBrandColor, width: 2)),
                                      child: Padding(
                                          padding: const EdgeInsets.only(
                                              left: 10.0,
                                              right: 10.0,
                                              top: 3,
                                              bottom: 3),
                                          child: Text(
                                            'Add Delivery Address',
                                            style:
                                                TextStyle(color: kBrandColor),
                                          )))
                                ],
                              ),
                            ),
                          ],
                        )
                ],
              ),
            ),
          ),
          Consumer<Cart>(
              builder: (_, deliveryPro, child) => Card(
                    child: Container(
                      margin: EdgeInsets.all(10.0),
                      padding: EdgeInsets.all(10.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text('Delivery Options *',
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16.0)),
                          ),
                          InkWell(
                            onTap: () {
                              deliveryPro
                                  .standardDelivery(this.widget.totalAmount);
                            },
                            child: Row(
                              children: [
                                Container(
                                  margin: EdgeInsets.only(left: 15.0),
                                  // decoration: BoxDecoration(
                                  //     shape: BoxShape.circle, color: kBrandColor),
                                  child: Padding(
                                    padding: const EdgeInsets.all(5.0),
                                    child: deliveryPro.getStandardDelivery
                                        ? Icon(
                                            Icons.check,
                                            size: 30.0,
                                            color: kBrandColor,
                                          )
                                        : Icon(
                                            Icons.radio_button_off_outlined,
                                            size: 30.0,
                                            color: kBrandColor,
                                          ),
                                  ),
                                ),
                                Container(
                                  width: 250,
                                  child: ListTile(
                                    title: Row(
                                      children: [
                                        Text(
                                          'N500 ',
                                          style: TextStyle(
                                              fontWeight: FontWeight.bold),
                                        ),
                                        Text('Standard Delivery'),
                                      ],
                                    ),
                                    subtitle: Text(
                                        '30 Minutes Maximum Delivery Time'),
                                  ),
                                )
                              ],
                            ),
                          ),
                          line(context),
                          InkWell(
                            onTap: () async {
                              // print('this is address ${deliveryPro.getExpressPickUpAddress}');
                              deliveryPro.pickUpSale();
                              await showModalBottomSheet(
                                  context: context,
                                  shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.vertical(
                                          top: Radius.circular(30.0))),
                                  builder: (ctx) {
                                    return BottomSheetModel();
                                  });
                              // if(res == deliveryPro.getExpressPickUpAddress){
                              //   print('this is from main Check out ${deliveryPro.getExpressPickUpAddress}');
                              // }
                            },
                            child: Row(
                              children: [
                                Container(
                                  margin: EdgeInsets.only(left: 15.0),
                                  // decoration: BoxDecoration(
                                  //     shape: BoxShape.circle, color: kBrandColor),
                                  child: Padding(
                                    padding: const EdgeInsets.all(5.0),
                                    child: deliveryPro.getPickUpSale
                                        ? Icon(
                                            Icons.check,
                                            size: 30.0,
                                            color: kBrandColor,
                                          )
                                        : Icon(
                                            Icons.radio_button_off_outlined,
                                            size: 30.0,
                                            color: kBrandColor,
                                          ),
                                  ),
                                ),
                                Container(
                                  width: 250,
                                  child: ListTile(
                                    title: Text(
                                        'Pick Up from Order Sales Partner'),
                                    subtitle: Text(
                                        'Choose the closest Location to You for Pickup'),
                                  ),
                                )
                              ],
                            ),
                          ),
                          SizedBox(
                            height: 20.0,
                          ),
                          deliveryPro.getPickUpSale == false
                              ? SizedBox()
                              : Padding(
                                  padding: const EdgeInsets.all(10.0),
                                  child: Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceEvenly,
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: [
                                          Text('Pick Up Details',
                                              style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  fontSize: 16.0)),
                                          SizedBox(
                                            height: 5.0,
                                          ),
                                          deliveryPro.getExpressPickUpAddress ==
                                                  null
                                              ? Text('Sailas Charles')
                                              : Text(deliveryPro
                                                  .getExpressPickUpAddress
                                                  .toString()),
                                        ],
                                      ),
                                      Container(
                                        margin: EdgeInsets.only(left: 30.0),
                                        child: Column(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          children: [
                                            Text('Contacts',
                                                style: TextStyle(
                                                    fontWeight: FontWeight.bold,
                                                    fontSize: 16.0)),
                                            Container(
                                                width: 180,
                                                margin: EdgeInsets.only(
                                                    bottom: 10.0, top: 5.0),
                                                child: Text(
                                                    '28 Peace Str. Ikeja, Lagos, Nigeria.')),
                                            Text('2348164293279'),
                                          ],
                                        ),
                                      ),
                                    ],
                                  ),
                                )
                        ],
                      ),
                    ),
                  )),
          Consumer<Cart>(
              builder: (_, deliveryPro, child) => Card(
                    child: Container(
                      margin: EdgeInsets.all(10.0),
                      padding: EdgeInsets.all(10.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text('Payments *',
                                style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16.0)),
                          ),
                          InkWell(
                            onTap: () {
                              deliveryPro.setPayWithWallet();
                            },
                            child: Row(
                              children: [
                                Container(
                                  margin: EdgeInsets.only(left: 15.0),
                                  // decoration: BoxDecoration(
                                  //     shape: BoxShape.circle, color: kBrandColor),
                                  child: Padding(
                                    padding: const EdgeInsets.all(5.0),
                                    child: deliveryPro.getPayWithWallet
                                        ? Icon(
                                            Icons.check,
                                            size: 30.0,
                                            color: kBrandColor,
                                          )
                                        : Icon(
                                            Icons.radio_button_off_outlined,
                                            size: 30.0,
                                            color: kBrandColor,
                                          ),
                                  ),
                                ),
                                Container(
                                  // margin: EdgeInsets.all(5.0),
                                  width: 305,
                                  child: ListTile(
                                    title: Padding(
                                      padding: const EdgeInsets.all(8.0),
                                      child: Text(
                                        'Pay with wallet ',
                                        style: TextStyle(
                                            fontWeight: FontWeight.bold),
                                      ),
                                    ),
                                    subtitle: Padding(
                                      padding: const EdgeInsets.all(8.0),
                                      child: Text(
                                        'For contactless Delivery we recommend Go Cashless and stay with wallet payment',
                                        // textAlign: TextAlign.justify,
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          deliveryPro.getPayWithWallet == false
                              ? SizedBox()
                              : Container(
                                  color: kBrandColor.withOpacity(.2),
                                  padding: const EdgeInsets.all(16.0),
                                  margin: const EdgeInsets.all(16.0),
                                  child: Container(
                                      margin: EdgeInsets.only(
                                          left: 10.0, right: 20.0),
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          Row(
                                            children: [
                                              Icon(FontAwesomeIcons.wallet,
                                                  color: kBrandColor),
                                              SizedBox(width: 5.0),
                                              Consumer<Authentication>(
                                                  builder: (_, walletDetail,
                                                          child) =>
                                                      Text(
                                                          'N${walletDetail.getSingleUserWallet.data?.amount == null ? '0' : walletDetail.getSingleUserWallet.data?.amount.toString()}',
                                                          style: TextStyle(
                                                              color:
                                                                  kBrandColor))),
                                            ],
                                          ),
                                          SizedBox(width: 10.0),
                                          InkWell(
                                            onTap: () {
                                              print('top Up');
                                            },
                                            child: Row(
                                              children: [
                                                Container(
                                                    width: 120,
                                                    decoration: BoxDecoration(
                                                        color: Colors.green
                                                            .withOpacity(.1),
                                                        borderRadius:
                                                            BorderRadius.all(
                                                                Radius.circular(
                                                                    30.0)),
                                                        border: Border.all(
                                                            color: kBrandColor,
                                                            width: 2)),
                                                    child: Padding(
                                                        padding:
                                                            const EdgeInsets
                                                                    .only(
                                                                left: 10.0,
                                                                right: 10.0,
                                                                top: 3,
                                                                bottom: 3),
                                                        child: Text(
                                                          'Top Up Wallet',
                                                          style: TextStyle(
                                                              color:
                                                                  kBrandColor),
                                                        )))
                                              ],
                                            ),
                                          ),
                                        ],
                                      ))),
                          line(context),
                          InkWell(
                            onTap: () async {
                              // print('this is address ${deliveryPro.getExpressPickUpAddress}');
                              deliveryPro.setPayWithCard();
                            },
                            child: Row(
                              children: [
                                Container(
                                  margin: EdgeInsets.only(left: 15.0),
                                  // decoration: BoxDecoration(
                                  //     shape: BoxShape.circle, color: kBrandColor),
                                  child: Padding(
                                    padding: const EdgeInsets.all(5.0),
                                    child: deliveryPro.getPayWithCard
                                        ? Icon(
                                            Icons.check,
                                            size: 30.0,
                                            color: kBrandColor,
                                          )
                                        : Icon(
                                            Icons.radio_button_off_outlined,
                                            size: 30.0,
                                            color: kBrandColor,
                                          ),
                                  ),
                                ),
                                Container(
                                  width: 300,
                                  child: ListTile(
                                    title: Padding(
                                      padding: const EdgeInsets.all(8.0),
                                      child: Text('Pay with card',
                                          style: TextStyle(
                                              fontWeight: FontWeight.bold)),
                                    ),
                                    subtitle: Padding(
                                      padding: const EdgeInsets.all(8.0),
                                      child: Text(
                                          'Your Security is our Priority. Enjoy Quick & easy Payment -Pay Security via Your Mastercard, Visa and Verve Cards of all Banks'),
                                    ),
                                  ),
                                )
                              ],
                            ),
                          ),
                          SizedBox(
                            height: 20.0,
                          ),
                        ],
                      ),
                    ),
                  )),
          Card(
            child: Column(
              children: [
                SizedBox(height: 20.0),
                Center(child: Image.asset('asset/card.png'))
              ],
            ),
          ),

          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Padding(
                  padding:
                      const EdgeInsets.only(top: 8.0, left: 30.0, bottom: 8.0),
                  child: Text('Sub-total', style: TextStyle(fontSize: 18.0)),
                ),
                Padding(
                  padding: EdgeInsets.only(right: 30.0, bottom: 8.0),
                  // child: Text('${this.widget.amount}'),
                ),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Padding(
                  padding: EdgeInsets.only(left: 30.0, bottom: 8.0),
                  child: Text('Total to Pay',
                      style: TextStyle(
                          fontSize: 18.0, fontWeight: FontWeight.bold)),
                ),
                Padding(
                  padding: EdgeInsets.only(right: 30.0, bottom: 8.0),
                  child: Text(
                      Provider.of<Cart>(context, listen: false)
                                  .getStandardDelivery ==
                              false
                          ? '${this.widget.totalAmount}'
                          : '${this.widget.totalAmount + 500}',
                      style: TextStyle(
                          fontSize: 18.0, fontWeight: FontWeight.bold)),
                ),
              ],
            ),
          ),

          Consumer<Cart>(
              builder: (_, submitOrder, child) => Container(
                    height: 70.0,
                    margin: EdgeInsets.all(20.0),
                    decoration: BoxDecoration(
                        color:
                         Provider.of<Authentication>(context,
                                            listen: false)
                                        .getAddressBookDetail
                                        .id ==
                                    null ||
                                submitOrder.getPickUpSale == false &&
                                    submitOrder.getStandardDelivery == false ||
                                submitOrder.getPayWithCard == false &&
                                    submitOrder.getPayWithWallet == false
                            ? kPrimaryColor.withOpacity(.2)
                            : kPrimaryColor,
                        borderRadius: BorderRadius.circular(10.0)),
                    child: FlatButton(
                     
                        // onPressed: ()=>_processPayment(),
                        onPressed: () async {
                           print(int.parse(Provider.of<Authentication>(context,
                                          listen: false)
                                      .getSingleUserWallet
                                      ?.data
                                      ?.amount ?? 0.toString()));
                          if (Provider.of<Authentication>(context,
                                      listen: false)
                                  .getAddressBookDetail
                                  .id ==
                              null) {
                            _scaffoldKey.currentState.showSnackBar(SnackBar(
                                content: Text('Address Must be Added')));
                          } else 
                          if (submitOrder.getPickUpSale == false &&
                              submitOrder.getStandardDelivery == false) {
                            _scaffoldKey.currentState.showSnackBar(SnackBar(
                                content:
                                    Text('Kindly Select Delivery Method')));
                          } else if (submitOrder.getPayWithCard == false &&
                              submitOrder.getPayWithWallet == false) {
                            _scaffoldKey.currentState.showSnackBar(SnackBar(
                                content: Text('Kindly Select Payment Method')));
                          } else {
                            if (submitOrder.getPayWithWallet == true) {
                              print('payment with wallet');
                              if (int.parse(Provider.of<Authentication>(context,
                                          listen: false)
                                      .getSingleUserWallet
                                      ?.data
                                      ?.amount ?? 0.toString()) >=
                                  int.parse(Provider.of<Cart>(context, listen: false).getStandardDelivery ==
                              false
                          ? '${this.widget.totalAmount}'
                          : '${this.widget.totalAmount + 500}')){
                                if (!await context.read<Cart>().orders(
                                    Provider.of<Authentication>(context,
                                            listen: false)
                                        .getAddressBookDetail
                                        .id
                                        .toString(),
                                    'online',
                                    Provider.of<Authentication>(context,
                                            listen: false)
                                        .getAddressBookDetail
                                        .deliveryInstructions
                                        .toString(),
                                    Provider.of<Cart>(context, listen: false)
                                                .getPickUpSale ==
                                            true
                                        ? "PickUp"
                                        : "Standard Mode")) {
                                  switch (context.read<Cart>().orderState) {
                                    case OrderState.error:
                                      // print('Error Procrossing Your order');
                                      _scaffoldKey.currentState.showSnackBar(
                                          SnackBar(
                                              content: Text(
                                                  'Error Processsing Your Order')));
                                  }
                                } else {
                                  Navigator.of(context).pushAndRemoveUntil(
                                      MaterialPageRoute(
                                          builder: (context) =>
                                              SuccessfulCheckOutPage(
                                                amount: double.parse(
                                                  "${Provider.of<Cart>(context, listen: false).getStandardDelivery == false ? this.widget.totalAmount : this.widget.totalAmount + 500}",
                                                ),
                                              )),
                                      (Route<dynamic> route) => false);
                                }
                              } else {
                                  _scaffoldKey.currentState.showSnackBar(SnackBar(
                                content: Text('Insuffient Money in Wallet')));
                              }
                            } else {
                              print('pay with card');
                              _processPayment();
                            }
                          }
                        },
                        child: Text(
                          'Place Order',
                          style: TextStyle(color: Colors.white),
                        )),
                  )),
        ]))));
  }

  void _processPayment() {
    try {
      PaystackPayManager(context: context)
        ..setSecretKey("sk_test_e593d547f41472da7e2756d29f18c1d7bc488acd")
        // ..setSecretKey("sk_test_e593d547f41472da7e2756d29f18c1d7bc488acd")
// Your company Image
        // ..setCompanyAssetImage(Image(
        //   image: NetworkImage(
        //       "https://res.cloudinary.com/acctgen1/image/upload/v1612393902/TECH2-01_vw1fvg.png"),
        // ))
        ..setAmount(int.parse(
            '${Provider.of<Cart>(context, listen: false).getStandardDelivery == false ? this.widget.totalAmount : this.widget.totalAmount + 500}00')) // you need to add two zeros at the end e.g 100000 = N1,000.00
// you can set your own unique transaction reference, here am using timestamp
        ..setReference(DateTime.now().millisecondsSinceEpoch.toString())
        ..setCurrency(
            "NGN") // Set currency, the platform only has three currencies, when registering the
//list of countries listed is the currency that is available for you to use
        ..setEmail(
            "${Provider.of<Authentication>(context, listen: false).getSingleUserDetail.data.user.email.toString()}") // user email address and information
        ..setFirstName(
            "${Provider.of<Authentication>(context, listen: false).getSingleUserDetail.data.user.name.toString()}")
        // ..setLastName("Test2")
        ..onSuccesful(_onPaymentSuccessful)
        ..setMetadata(
          {
            "custom_fields": [
              {
                "Order id": "NutLoop", // set this your company name
                "Module": "Check Out",
                "User":  "${Provider.of<Authentication>(context, listen: false).getSingleUserDetail.data.user.id.toString()}",
                "Customer id":  "${Provider.of<Authentication>(context, listen: false).getSingleUserDetail.data.user.psCusId.toString()}"
              }
            ]
          },
        )
        ..onPending(_onPaymentPending)
        ..onFailed(_onPaymentFailed)
        ..onCancel(_onCancel)
        ..initialize();
    } catch (error) {
      print('Payment Error ==> $error');
    }
  }

  void _onPaymentSuccessful(Transaction transaction, String addressId, address) async {
    print('Transaction succesful');
    print(
        "Transaction message ==> ${transaction.message}, Ref ${transaction.refrenceNumber}");
    if (!await context.read<Cart>().orders(
        Provider.of<Authentication>(context, listen: false)
            .getAddressBookDetail
            .id
            .toString(),
        'online',
        Provider.of<Authentication>(context, listen: false)
            .getAddressBookDetail
            .deliveryInstructions
            .toString(),
        Provider.of<Cart>(context, listen: false).getPickUpSale == true
            ? "PickUp"
            : "Standard Mode")) {
      switch (context.read<Cart>().orderState) {
        case OrderState.error:
          // print('Error Procrossing Your order');
          _scaffoldKey.currentState.showSnackBar(
              SnackBar(content: Text('Error Processsing Your Order')));
      }
    } else {
      Navigator.of(context).pushAndRemoveUntil(
          MaterialPageRoute(
              builder: (context) => SuccessfulCheckOutPage(
                  amount: double.parse(
                    "${Provider.of<Cart>(context, listen: false).getStandardDelivery == false ? this.widget.totalAmount : this.widget.totalAmount + 500}",
                  ),
                  transactionRefNum: transaction.refrenceNumber)),
          (Route<dynamic> route) => false);
    }
  }

  void _onPaymentPending(Transaction transaction) async {
    print('Transaction Pending');
    print("Transaction Ref ${transaction.refrenceNumber}");
    Navigator.of(context).pop();
  }

  void _onPaymentFailed(Transaction transaction) {
    print('Transaction Failed');
    print("Transaction message ==> ${transaction.message}");
    Navigator.pop(context);
  }

  void _onCancel(Transaction transaction) {
    print('Transaction Cancelled');
    Navigator.of(context).pop();
  }
}
