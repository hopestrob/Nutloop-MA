import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:nutloop_ecommerce/model/product_model.dart';
import 'package:nutloop_ecommerce/provider/auth_provider.dart';
import 'package:nutloop_ecommerce/provider/cart.dart';
import 'package:nutloop_ecommerce/screens/Auth/constants.dart';
import 'package:nutloop_ecommerce/screens/Users/profile.dart';
import 'package:nutloop_ecommerce/screens/Users/widget/featuredProduct.dart';
import 'package:nutloop_ecommerce/screens/Users/widget/listingProductMain.dart';
import 'package:nutloop_ecommerce/screens/Users/widget/partner.dart';
import 'package:nutloop_ecommerce/screens/Users/widget/search.dart';
import 'package:provider/provider.dart';

// import 'package:provider/provider.dart';

import 'allProducts.dart';
import 'cart_screen.dart';


class Homepage extends StatefulWidget {
  final String authName;

  Homepage({this.authName});
  @override
  _HomepageState createState() => _HomepageState();
}

class _HomepageState extends State<Homepage> {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  List<Product> _products;
  List<ProductsModel> _category;
  int quantity = 1;

  Future getResponse() async {
    var res = await rootBundle.loadString('asset/data.json');
    return jsonDecode(res);
  }

  Future getCategory() async {
    var categres = await getResponse() as List;
    // var data = categres.map((e) => ProductsModel.fromJson(e));
    if (!mounted) return;
    setState(() {
      _category = categres.map((e) => ProductsModel.fromJson(e)).toList();
      print('thuis is theh second ${_category.length}');
    });
    if (!mounted) return;
    setState(() {
      _products = _category
          .map((e) => e.products)
          .expand((i) => i)
          .map((e) => e)
          .toList();
      print('this is the second ${_products.length}');
    });

    return _category;
  }

  PageController pageController;
  int pageIndex = 0;

  @override
  void initState() {
    super.initState();
    getCategory();
    pageController = PageController();
  }

  @override
  void dispose() {
    pageController.dispose();
    getCategory();
    super.dispose();
  }

  onPageChanged(int pageIndex) {
    if (mounted) {
      setState(() {
        this.pageIndex = pageIndex;
      });
    }
  }

  onTap(int pageIndex) {
    pageController.animateToPage(pageIndex,
        duration: Duration(milliseconds: 200), curve: Curves.easeInOut);
  }

  @override
  Widget build(BuildContext context) {
      redirectser() => Authentication().redirectser();
    return Scaffold(
      key: _scaffoldKey,
      resizeToAvoidBottomInset: false,
      // appBar: new
      body:FutureBuilder(
            future: redirectser(),
            builder: (context, snapshot) {
              switch (snapshot.connectionState) {
                case ConnectionState.none:
                case ConnectionState.waiting:
                  return Scaffold(
                    body: Center(
                      child: Container(
                        padding: const EdgeInsets.only(right: 15),
                        height: 50,
                        child: CupertinoActivityIndicator(
                          radius: 12,
                        ),
                      ),
                    ),
                  );
                default:
                  if (snapshot.hasError)
                    return Text('Error: ${snapshot.error}');
                  else
                    return  SafeArea(
        child: PageView(
          children: <Widget>[
            Container(
              margin: EdgeInsets.only(left: 10.0, right: 10.0),
              child: Column(
                children: [
                  new Container(
                    margin: EdgeInsets.only(left:15.0, right: 5.0),
                    // width: 200,
                    child: SafeArea(
                      child: Column(
                        // mainAxisAlignment: MainAxisAlignment.start,
                        // crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          SizedBox(height: 30),
                          buildActionbar(widget.authName),
                          SizedBox(height: 20),
                          buildSearchRow(),
                          SizedBox(height: 10),
                        ],
                      ),
                    ),
                  ),
                  Expanded(
                    child: ListView(children: <Widget>[
                      Container(
                        margin: EdgeInsets.all(10.0),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              'Best Deals',
                              style: TextStyle(fontWeight: FontWeight.bold),
                            ),
                            Text(
                              'View All Products',
                              style: TextStyle(color: kBrandColor),
                            )
                          ],
                        ),
                      ),
                      FeaturedProduct(products: _products),
                      // SizedBox(height: 20.0),
                      Container(
                        height: MediaQuery.of(context).size.height / 5,
                        child: ListView(
                          scrollDirection: Axis.horizontal,
                          children: [
                            PartnerBar(color: productColor),
                            PartnerBar(color: Colors.red),
                            PartnerBar(color: productColor),
                            PartnerBar(color: productColor2),
                          ],
                        ),
                      ),
                      Container(
                        margin: EdgeInsets.all(10.0),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              'Featured Selling Items',
                              style: TextStyle(fontWeight: FontWeight.bold),
                            ),
                            Text(
                              'View All Products',
                              style: TextStyle(color: kBrandColor),
                            )
                          ],
                        ),
                      ),
                      ListProductsMain(products: _products),
                    ]),
                  ),
                ],
              ),
            ),
            AllProducts(),
            CartScreen(),
            ProfileScreen()
          ],
          controller: pageController,
          onPageChanged: onPageChanged,
          physics: NeverScrollableScrollPhysics(),
        ),
      );
      
     }
            }),
            bottomNavigationBar: CupertinoTabBar(
          currentIndex: pageIndex,
          onTap: onTap,
          activeColor: kBrandColor,
          inactiveColor: greyColor2,
          items: [
            BottomNavigationBarItem(
                icon: Icon(
                  Icons.home,
                  color: greyColor2,
                ),
                activeIcon:Icon(
                  Icons.home,
                  color: kBrandColor,
                ),
                title: Text(
                  'Home',
                  style: TextStyle(color: greyColor2),
                )),
            BottomNavigationBarItem(
                icon: Icon(Icons.menu, color: greyColor2),
                activeIcon:Icon(Icons.menu, color: kBrandColor),
                title: Text(
                  'All Products',
                  style: TextStyle(color: greyColor2),
                )),
            BottomNavigationBarItem(
                icon: Icon(Icons.shopping_cart, color: greyColor2),
                activeIcon:Icon(Icons.shopping_cart, color: kBrandColor),
                title: Text(
                  'Cart',
                  style: TextStyle(color: greyColor2),
                )),
            // BottomNavigationBarItem(icon: Icon(Icons.search, color: greyColor2), title: Text('Advance Search', style: TextStyle(color:Colors.black),)),
            BottomNavigationBarItem(
                icon: Icon(Icons.person, color: greyColor2),
                activeIcon:Icon(Icons.person, color: kBrandColor),
                title: Text(
                  'Profile',
                  style: TextStyle(color: greyColor2),
                )),
          ])
      
      );
  }

  Row buildActionbar(String authName) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Container(
          margin: EdgeInsets.all(8.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              GestureDetector(
                onTap: () => {print('Hello')},
                child: CircleAvatar(
                  radius: 25,
                  backgroundColor: kBrandColor,
                  child: Icon(
                    Icons.person,
                    size: 50.0,
                    color: Colors.white,
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(8.0),
                child: Text(
                  authName,
                  style: TextStyle(
                    fontSize: 15,
                    fontWeight: FontWeight.bold,
                    color: kBrandColor,
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}


class UserWidget extends StatelessWidget {
  final String productName;
  final String price;
  final String imageURL;

  const UserWidget({Key key, this.productName, this.price, this.imageURL})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 670, top: 50.0),
      child: Card(
        elevation: 8,
        child: new Container(
          decoration: new BoxDecoration(
              border: new Border.all(width: 1.0, color: Colors.grey),
              color: Colors.white70),
          margin: new EdgeInsets.symmetric(vertical: 1.0),
          child: Column(
            children: [
              Image.asset(imageURL, height: 20, width: 20),
              Text(productName),
              Text(price),
            ],
          ),
        ),
      ),
    );
  }
}
