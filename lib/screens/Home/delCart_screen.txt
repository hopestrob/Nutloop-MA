import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:nutloop_ecommerce/helper/api.dart';
import 'package:nutloop_ecommerce/provider/products_provider.dart';
import 'package:nutloop_ecommerce/screens/Auth/constants.dart';
import 'package:nutloop_ecommerce/screens/Home/checkout.dart';
import 'package:nutloop_ecommerce/screens/Home/homepage.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../../provider/cart.dart' show Cart;
import 'checkOutAddCard.dart';
import '../../helper/config_size.dart';

class CartScreen extends StatelessWidget {
  static const routeName = '/cart';

  @override
  Widget build(BuildContext context) {
    final cart = Provider.of<Cart>(context);
    Provider.of<Cart>(context, listen: true).getSavedCartItemsList();
    Size size = MediaQuery.of(context).size;
    return Scaffold(
        // appBar: AppBar(
        //   title: Text('Your Cart'),
        // ),
        body: Padding(
      padding: const EdgeInsets.only(top: 20.0),
      child: cart.items.isEmpty
          ? Column(
              children: [
                Container(
                  margin: EdgeInsets.all(8.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Center(
                        child: Text('My Cart',
                            style: TextStyle(
                                color: kPrimaryColor,
                                fontSize: 20.0,
                                fontWeight: FontWeight.bold)),
                      ),
                    ],
                  ),
                ),
                // Spacer(),
                line(context),
                SizedBox(height: size.height * 0.150),
                Expanded(
                  flex: 1,
                  child: Text(
                    'Your Cart is Empty',
                    style: TextStyle(fontSize: 20.0),
                  ),
                ),
                Expanded(
                  flex: 3,
                  child: SvgPicture.asset(
                    "asset/cart.svg",
                    height: size.width * 0.330,
                    color: kBrandColor,
                  ),
                ),
                // SizedBox(height: size.height * 0.150),
                Container(
                  margin: EdgeInsets.all(5.0 * SizeConfig.widthMultiplier),
                  width: 95 * SizeConfig.widthMultiplier,
                  padding: EdgeInsets.all(10.0),
                  // width: size.width / 1.2,
                  decoration: BoxDecoration(
                      color: kPrimaryColor,
                      borderRadius: BorderRadius.circular(5.0)),
                  child: FlatButton(
                    onPressed: () async {
                      SharedPreferences prefs =
                          await SharedPreferences.getInstance();
                      var authNames = prefs.getString('authName');
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (context) =>
                                  Homepage(authName: authNames)));
                    },
                    child: Text(
                      'Start Shopping',
                      style: TextStyle(color: Colors.white),
                    ),
                  ),
                ),
                SizedBox(height: size.height * 0.020),
              ],
            )
          : Column(
              children: <Widget>[
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 15, vertical: 8),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: <Widget>[
                      Padding(
                        padding: const EdgeInsets.only(left: 8.0),
                        child: Text(
                          "My Cart",
                          style: TextStyle(
                              fontSize: 20,
                              color: kPrimaryColor,
                              fontWeight: FontWeight.bold),
                        ),
                      ),
                      Spacer(),

                      // Chip(
                      //   // items: Total(Excluding delivery charges)N
                      //   label: Text(
                      //     '${cart.totalAmount}',
                      //     style: TextStyle(color: Theme.of(context).primaryTextTheme.headline6.color),
                      //   ),
                      //   backgroundColor: Theme.of(context).primaryColor,
                      // ),
                      OrderButton(cart: cart)
                    ],
                  ),
                ),
                SizedBox(height: size.height * 0.010),
                Divider(
                  color: Colors.grey,
                  height: 1.0,
                ),
                Align(
                    alignment: Alignment.topLeft,
                    child: Padding(
                      padding: const EdgeInsets.only(
                          left: 20.0, bottom: 5.0, top: 10.0),
                      child: Row(
                        children: [
                          Consumer<Cart>(
                            builder: (_, cartObject, child) => Text(
                                "${cartObject.itemCount.toString()} items: Total(Excluding delivery charges)",
                                style:
                                    TextStyle(fontSize: 13, color: greyColor3)),
                          ),
                          Text("N${cart.totalAmount}",
                              style:
                                  TextStyle(fontSize: 13, color: kBrandColor)),
                        ],
                      ),
                    )),
                Expanded(
                  child: Consumer<Cart>(
                      builder: (_, savedCartItem, child) => ListView(
                              children: List.generate(
                                  savedCartItem.items.length, (index) {
                            var image = json.decode(savedCartItem
                                .items[index].product.images) as List;
                            final prod =
                                savedCartItem.items[index].product;
                                  //  var total = 0.0;
                                  // savedCartItem.getCartItem[index].product.prices.forEach((cartItem) => total += int.parse(cartItem.priceRegular) *savedCartItem.getCartItem[index].quantity);
                                // print("${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == prod.prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? prod.prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '') : prod.prices.where((e) => e.unitId == 2).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '')}");
                            return Card(
                              child: Column(
                                children: [
                                  Row(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.center,
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    children: [
                                      Row(
                                        children: [
                                          Container(
                                            margin:
                                                EdgeInsets.only(right: 15.0),
                                            width: 120,
                                            height: 120,
                                            decoration: BoxDecoration(
                                                image: DecorationImage(
                                                    image: NetworkImage(
                                                        "${Api.imageUrl}${image.map((e) => e.toString()).join()}"),
                                                    fit: BoxFit.cover)),
                                          ),
                                          Column(
                                            crossAxisAlignment:
                                                CrossAxisAlignment.start,
                                            children: [
                                              Container(
                                                width: 130.0,
                                                child: Text(prod.name,
                                                    overflow:
                                                        TextOverflow.ellipsis,
                                                    style: TextStyle(
                                                        fontSize: 16.0,
                                                        fontWeight:
                                                            FontWeight.bold,
                                                        color: Colors.grey)),
                                              ),
                                              SizedBox(
                                                height: 5.0,
                                              ),
                                              Text(
                                                '#${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == prod.prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? prod.prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '') : prod.prices.where((e) => e.unitId == 2).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '')}/${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == prod.prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? prod.prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.abbreviation).toString().replaceAll('(', '').replaceAll(')', '') : "kg"}',
                                                style: TextStyle(
                                                    color: Colors.grey,
                                                    fontSize: 12.0),
                                              ),
                                              SizedBox(
                                                height: 25.0,
                                              ),
                                              Row(
                                                // crossAxisAlignment: CrossAxisAlignment.,
                                                children: [
                                                  Container(
                                                    height: 38.0,
                                                    decoration: BoxDecoration(
                                                        border: Border.all(
                                                            color: kPrimaryColor
                                                                .withOpacity(
                                                                    .3)),
                                                        borderRadius:
                                                            BorderRadius
                                                                .circular(
                                                                    10.0)),
                                                    child: Row(
                                                      children: [
                                                        Container(
                                                            // padding: EdgeInsets.only(top:5.0),
                                                            width: 40.0,
                                                            height: 50,
                                                            decoration:
                                                                BoxDecoration(
                                                              borderRadius: BorderRadius.only(
                                                                  topLeft: Radius
                                                                      .circular(
                                                                          10.0),
                                                                  bottomLeft: Radius
                                                                      .circular(
                                                                          10.0)),
                                                              color: kPrimaryColor
                                                                  .withOpacity(
                                                                      .3),
                                                              // border: Border.all(color: kPrimaryColor.withOpacity(.3))
                                                            ),
                                                            child: InkWell(
                                                              onTap: () {
                                                                
                                                                // Provider.of<Cart>(context, listen: false)
                                                                //         .updateCart(
                                                                //             savedCartItem.getCartItem[index].id.toString(), savedCartItem.getCartItem[index].quantity);
                                                              },
                                                              child: Icon(
                                                                  Icons.remove,
                                                                  color:
                                                                      kPrimaryColor),
                                                            )),
                                                        Container(
                                                            width: 40.0,
                                                            child: Text(
                                                              "${Provider.of<Cart>(context, listen:false).getQuantity()}",
                                                              // "${savedCartItem.getCartItem[index].quantity} ${Provider.of<Cart>(context, listen:false).getQuantity}",
                                                              textAlign:
                                                                  TextAlign
                                                                      .center,
                                                              style: TextStyle(
                                                                  fontSize:
                                                                      18.0,
                                                                  fontWeight:
                                                                      FontWeight
                                                                          .bold),
                                                            )),
                                                        Container(
                                                            width: 40.0,
                                                            height: 50,
                                                            decoration:
                                                                BoxDecoration(
                                                              borderRadius: BorderRadius.only(
                                                                  topRight: Radius
                                                                      .circular(
                                                                          10.0),
                                                                  bottomRight: Radius
                                                                      .circular(
                                                                          10.0)),
                                                              color: kPrimaryColor
                                                                  .withOpacity(
                                                                      .3),
                                                              // border: Border.all(color: kPrimaryColor)
                                                            ),
                                                            child: InkWell(
                                                              child: Icon(
                                                                  Icons.add,
                                                                  color:
                                                                      kPrimaryColor),
                                                              onTap: () {
                                                                // Provider.of<Cart>(context, listen: false).incrementQty();
                                                                // if(quantity == 0) return;
                                                                //  Provider.of<Cart>(context, listen: false)
                                                                //     .updateProduct2(
                                                                //         productId, price, productName);
                                                              },
                                                            )),
                                                      ],
                                                    ),
                                                  ),
                                                ],
                                              )
                                            ],
                                          ),
                                        ],
                                      ),
                                      Container(
                                          margin: EdgeInsets.only(right: 20.0),
                                          padding: EdgeInsets.all(5.0),
                                          decoration: BoxDecoration(
                                              color: kPrimaryColor,
                                              border: Border.all(
                                                  // width: 3.0,
                                                  color: kPrimaryColor),
                                              borderRadius: BorderRadius.all(
                                                  Radius.circular(30.0))),
                                          child: InkWell(
                                              onTap: () {
                                                print('hello');
                                                //  Provider.of<Cart>(context, listen: false).removeItem(getCartItem.getSavedItem[index].id.toString());
                                              },
                                              child: Icon(
                                                  FontAwesomeIcons.trash,
                                                  color: Colors.white)))
                                    ],
                                  )
                                ],
                              ),
                            );
                          }))),
                ),
              ],
            ),
    ));
  }
}

class OrderButton extends StatefulWidget {
  const OrderButton({
    Key key,
    @required this.cart,
  }) : super(key: key);

  final Cart cart;

  @override
  _OrderButtonState createState() => _OrderButtonState();
}

class _OrderButtonState extends State<OrderButton> {
  var _isLoading = false;
  @override
  Widget build(BuildContext context) {
    return FlatButton(
      child: _isLoading
          ? CircularProgressIndicator()
          : Container(
              width: 150,
              decoration: BoxDecoration(
                  color: kPrimaryColor,
                  borderRadius: BorderRadius.circular(10.0)),
              child: FlatButton(
                  onPressed: () {
                  //   Navigator.push(
                  //       context,
                  //       MaterialPageRoute(
                  //           builder: (context) => CheckOutPage(
                  //                 amount: widget.cart.totalAmount,
                  //                 products: widget.cart.items.values.toList(),
                  //               )));
                  },
                  child: Text(
                    "Check out",
                    style: TextStyle(color: Colors.white),
                  ))),
      onPressed: (widget.cart.totalAmount <= 0)
          ? null
          : () async {
              setState(() {
                _isLoading = true;
              });

              // await Provider.of<Orders>(context, listen: false).addOrder(
              //     widget.cart.items.values.toList(),
              //     widget.cart.totalAmount
              // );
              setState(() {
                _isLoading = false;
              });
              widget.cart.clearCart();
            },
      textColor: Theme.of(context).primaryColor,
    );
  }
}
