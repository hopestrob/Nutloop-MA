import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:nutloop_ecommerce/model/category_model.dart';
import 'package:nutloop_ecommerce/model/product_model.dart';
import 'package:nutloop_ecommerce/provider/products_provider.dart';
import 'package:nutloop_ecommerce/screens/Auth/constants.dart';
import 'package:provider/provider.dart';

import 'productBycategory.dart';

class AllProducts extends StatefulWidget {
  @override
  _AllProductsState createState() => _AllProductsState();
}

class _AllProductsState extends State<AllProducts> {

List<Product> _products;
List<ProductsModel> _category;

 Future getResponse() async {
    var res = await rootBundle.loadString('asset/data.json');
    return jsonDecode(res);
  }


   Future getCategory() async {
        var categres = await getResponse() as List;
        // var data = categres.map((e) => ProductsModel.fromJson(e));
          if (!mounted) return;
        setState(() {
          _category = categres.map((e) => ProductsModel.fromJson(e)).toList();
          // print('thuis is theh second ${_category.length}');
        });
          if (!mounted) return;
        setState(() {
          _products = _category.map((e) => e.products).expand((i) => i).map((e) => e).toList();
            // print('this is the second ${_products.length}');
        });

    return _category;
   }

  PageController pageController;
  int pageIndex = 0;

  @override
  void initState() {
    super.initState();
    getCategory();
    pageController = PageController();
  }

  @override
  void dispose() {
    pageController.dispose();
    getCategory();
    super.dispose();
  }

  onPageChanged(int pageIndex) {
    if (mounted) {
      setState(() {
        this.pageIndex = pageIndex;
      });
    }
  }

  onTap(int pageIndex) {
    pageController.animateToPage(pageIndex,
        duration: Duration(milliseconds: 200), curve: Curves.easeInOut);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      body: SafeArea(
        child: Container(
          margin: const EdgeInsets.all(10.0),
          padding: const EdgeInsets.all(8.0),
          child: ListView(
            children: <Widget>[
            Padding(
              padding: const EdgeInsets.only(top:40.0, bottom: 20.0),
              child: Center(child: Text('All Products', style: TextStyle(color: kBrandColor, fontSize: 20.0, fontWeight: FontWeight.bold)),),
            ),
            buildSearchRow(),
            SizedBox(height: 20),
            FutureBuilder(
               future: Provider.of<ProductsProvider>(context, listen: false).getCategories(),
              builder: (BuildContext context, snapshot) {
                switch (snapshot.connectionState) {
                case ConnectionState.waiting:
                  return Center(
                    child: CupertinoActivityIndicator(
                          radius: 12,
                        ),
                  );
                  default:
                  if (snapshot.hasData==false)
                    return Text('Error: ${snapshot.error}');
                  else 
                return Consumer<ProductsProvider>(
                builder: (context, category, child) {
                  final categories = category.getCategoy;
                  // print("this is category ${categories.length}");
                  return ListView.builder(
                    shrinkWrap: true,
                    scrollDirection: Axis.vertical,
                     physics: NeverScrollableScrollPhysics(),
                    itemCount: categories == null ? 0 : categories.length,
                    itemBuilder: (context, index) {
                      print("this is category ${categories[index].name}");
                        return InkWell(
                          onTap: (){
                            Navigator.push(context, MaterialPageRoute(builder: (context) => ProductsByCategory(categoryName: categories[index].name)));
                          },
                           child: Container(
                            height: MediaQuery.of(context).size.height / 7.5,
                            margin: EdgeInsets.only(top:5.0, bottom: 20.0, right: 15.0, left: 15.0),
                            padding: EdgeInsets.all(10.0),
                             decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10.0),
                              color: categories[index].name == "Vegetables" ? productColor2
                               : categories[index].name == "Fresh Fruits" ? productColor2 
                               : categories[index].name == "Cereals & Grains" ? kBrandColor
                               : categories[index].name == "Meat and Poultry" ? productColor2
                               : categories[index].name == "Cooking Produce" ? kBrandColor  : kBrandColor,
                               boxShadow: [
                              BoxShadow(
                                color: categories[index].name == "Vegetables" ? productColor2
                               : categories[index].name == "Fresh Fruits" ? productColor2 
                                : categories[index].name == "Cereals & Grains" ? kBrandColor
                               : categories[index].name == "Meat and Poultry" ? productColor2
                               : categories[index].name == "Cooking Produce" ? kBrandColor  : kBrandColor,
                                spreadRadius: 5,
                                blurRadius: 5,
                                offset: Offset(0, 3), // changes position of shadow
                              ),
                            ], 
                            ),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceAround,
                              children: [
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(categories[index].name, style: TextStyle(
                                      color: Colors.white, fontSize: 24.0, fontWeight: FontWeight.bold
                                    )),
                                    
                                    Container(
                                      width: MediaQuery.of(context).size.width / 1.6,
                                      child: Text(categories[index].description, style: TextStyle(
                                        color: Colors.white, fontSize: 12.0,
                                      )),
                                    ),
                                  ],
                                ),
                              //   Icon(
                              //     Icons.categories[index].icon 
                              //  : _category[index].categoryName == "Meat and Poultry" ? Icons.fastfood
                              //  : _category[index].categoryName == "Cooking Produce" ?  Icons.emoji_food_beverage : Icons.fastfood, 
                              //   color: Colors.white.withOpacity(.6), size: 80.0,),
                              ],
                            ),
                          ),
                        );
                    });
                    });
              }}
            )
           

          ]),
        ),
      ),
       );
  }

  Row buildSearchRow() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        SearchProductWidget(),
        SizedBox(width: 10),
      ],
    );
  }

  Row buildActionbar() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        GestureDetector(
          onTap: () => {print('Hello')},
          child: CircleAvatar(
            radius: 25,
            backgroundColor: kPrimaryColor,
            child: Icon(
              Icons.person,
              size: 50.0,
              color: Colors.white,
            ),
          ),
        ),
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: Text(
            'Hi Josh,',
            style: TextStyle(
              fontSize: 15,
              fontWeight: FontWeight.bold,
              color: kPrimaryColor,
            ),
          ),
        ),
      ],
    );
  }
}

class SearchProductWidget extends StatelessWidget {
  const SearchProductWidget({Key key, s}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: TextFormField(
        onTap: () {
          print('Search tapped');
        },
        keyboardType: TextInputType.text,
        autofocus: false,
        style:
            new TextStyle(fontWeight: FontWeight.normal, color: greyColor4),
        decoration: new InputDecoration(
            contentPadding:
                new EdgeInsets.symmetric(vertical: 10.0, horizontal: 8.0),
            labelText: "What would you like to buy today?",
            labelStyle: TextStyle(fontSize: 12.0),
            fillColor: greyColor5,
            prefixIcon: Icon(Icons.search, color: kBrandColor),
            border: new OutlineInputBorder(
                borderRadius: new BorderRadius.all(Radius.circular(50.0)), gapPadding: 12),
            enabledBorder: InputBorder.none,
            filled: true),
        validator: (val) {
          if (val.length == 0) {
            return "Search field cannot be empty";
          } else {
            return null;
          }
        },
      ),
    );
  }
}

class UserWidget extends StatelessWidget {
  final String productName;
  final String price;
  final String imageURL;

  const UserWidget({Key key, this.productName, this.price, this.imageURL})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 670, top: 50.0),
      child: Card(
        elevation: 8,
        child: new Container(
          decoration: new BoxDecoration(
              border: new Border.all(width: 1.0, color: Colors.grey),
              color: Colors.white70),
          margin: new EdgeInsets.symmetric(vertical: 1.0),
          child: Column(
            children: [
              Image.asset(imageURL, height: 20, width: 20),
              Text(productName),
              Text(price),
            ],
          ),
        ),
      ),
    );
  }
}




import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:nutloop_ecommerce/model/category_model.dart';
import 'package:nutloop_ecommerce/model/product_model.dart';
import 'package:nutloop_ecommerce/provider/products_provider.dart';
import 'package:nutloop_ecommerce/screens/Auth/constants.dart';
import 'package:provider/provider.dart';

import 'productBycategory.dart';

class AllProducts extends StatefulWidget {
  @override
  _AllProductsState createState() => _AllProductsState();
}

class _AllProductsState extends State<AllProducts> {

List<Product> _products;
List<ProductsModel> _category;

 Future getResponse() async {
    var res = await rootBundle.loadString('asset/data.json');
    return jsonDecode(res);
  }


   Future getCategory() async {
        var categres = await getResponse() as List;
        // var data = categres.map((e) => ProductsModel.fromJson(e));
          if (!mounted) return;
        setState(() {
          _category = categres.map((e) => ProductsModel.fromJson(e)).toList();
          // print('thuis is theh second ${_category.length}');
        });
          if (!mounted) return;
        setState(() {
          _products = _category.map((e) => e.products).expand((i) => i).map((e) => e).toList();
            // print('this is the second ${_products.length}');
        });

    return _category;
   }

  PageController pageController;
  int pageIndex = 0;

  @override
  void initState() {
    super.initState();
    getCategory();
    pageController = PageController();
  }

  @override
  void dispose() {
    pageController.dispose();
    getCategory();
    super.dispose();
  }

  onPageChanged(int pageIndex) {
    if (mounted) {
      setState(() {
        this.pageIndex = pageIndex;
      });
    }
  }

  onTap(int pageIndex) {
    pageController.animateToPage(pageIndex,
        duration: Duration(milliseconds: 200), curve: Curves.easeInOut);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      body: SafeArea(
        child: Container(
          margin: const EdgeInsets.all(10.0),
          padding: const EdgeInsets.all(8.0),
          child: ListView(
            children: <Widget>[
            Padding(
              padding: const EdgeInsets.only(top:40.0, bottom: 20.0),
              child: Center(child: Text('All Products', style: TextStyle(color: kBrandColor, fontSize: 20.0, fontWeight: FontWeight.bold)),),
            ),
            buildSearchRow(),
            SizedBox(height: 20),
           
                  // if (snapshot.hasData==false)
                  //   return Text('Error: ${snapshot.error}');
                  // else 
                 Consumer<ProductsProvider>(
                builder: (context, cat, child) {
                  return ListView.builder(
                    shrinkWrap: true,
                    scrollDirection: Axis.vertical,
                     physics: NeverScrollableScrollPhysics(),
                    itemCount: cat.getCategoy.length == null ? 0 : cat.getCategoy.length,
                    itemBuilder: (context, index) {
                      final categories = cat.getCategoy;
                      print("this is category ${categories[index].name}");
                        return InkWell(
                          onTap: (){
                            Navigator.push(context, MaterialPageRoute(builder: (context) => ProductsByCategory(categoryName: categories[index].name)));
                          },
                           child: Container(
                            height: MediaQuery.of(context).size.height / 7.5,
                            margin: EdgeInsets.only(top:5.0, bottom: 20.0, right: 15.0, left: 15.0),
                            padding: EdgeInsets.all(10.0),
                             decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(10.0),
                              color: categories[index].name == "Vegetables" ? productColor2
                               : categories[index].name == "Fresh Fruits" ? productColor2 
                               : categories[index].name == "Cereals & Grains" ? kBrandColor
                               : categories[index].name == "Meat and Poultry" ? productColor2
                               : categories[index].name == "Cooking Produce" ? kBrandColor  : kBrandColor,
                               boxShadow: [
                              BoxShadow(
                                color: categories[index].name == "Vegetables" ? productColor2
                               : categories[index].name == "Fresh Fruits" ? productColor2 
                                : categories[index].name == "Cereals & Grains" ? kBrandColor
                               : categories[index].name == "Meat and Poultry" ? productColor2
                               : categories[index].name == "Cooking Produce" ? kBrandColor  : kBrandColor,
                                spreadRadius: 5,
                                blurRadius: 5,
                                offset: Offset(0, 3), // changes position of shadow
                              ),
                            ], 
                            ),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceAround,
                              children: [
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(categories[index].name, style: TextStyle(
                                      color: Colors.white, fontSize: 24.0, fontWeight: FontWeight.bold
                                    )),
                                    
                                    Container(
                                      width: MediaQuery.of(context).size.width / 1.6,
                                      child: Text(categories[index].description, style: TextStyle(
                                        color: Colors.white, fontSize: 12.0,
                                      )),
                                    ),
                                  ],
                                ),
                              //   Icon(
                              //     Icons.categories[index].icon 
                              //  : _category[index].categoryName == "Meat and Poultry" ? Icons.fastfood
                              //  : _category[index].categoryName == "Cooking Produce" ?  Icons.emoji_food_beverage : Icons.fastfood, 
                              //   color: Colors.white.withOpacity(.6), size: 80.0,),
                              ],
                            ),
                          ),
                        );
                    });
                    })
        
          ]),
        ),
      ),
       );
  }

  Row buildSearchRow() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        SearchProductWidget(),
        SizedBox(width: 10),
      ],
    );
  }

  Row buildActionbar() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        GestureDetector(
          onTap: () => {print('Hello')},
          child: CircleAvatar(
            radius: 25,
            backgroundColor: kPrimaryColor,
            child: Icon(
              Icons.person,
              size: 50.0,
              color: Colors.white,
            ),
          ),
        ),
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: Text(
            'Hi Josh,',
            style: TextStyle(
              fontSize: 15,
              fontWeight: FontWeight.bold,
              color: kPrimaryColor,
            ),
          ),
        ),
      ],
    );
  }
}

class SearchProductWidget extends StatelessWidget {
  const SearchProductWidget({Key key, s}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: TextFormField(
        onTap: () {
          print('Search tapped');
        },
        keyboardType: TextInputType.text,
        autofocus: false,
        style:
            new TextStyle(fontWeight: FontWeight.normal, color: greyColor4),
        decoration: new InputDecoration(
            contentPadding:
                new EdgeInsets.symmetric(vertical: 10.0, horizontal: 8.0),
            labelText: "What would you like to buy today?",
            labelStyle: TextStyle(fontSize: 12.0),
            fillColor: greyColor5,
            prefixIcon: Icon(Icons.search, color: kBrandColor),
            border: new OutlineInputBorder(
                borderRadius: new BorderRadius.all(Radius.circular(50.0)), gapPadding: 12),
            enabledBorder: InputBorder.none,
            filled: true),
        validator: (val) {
          if (val.length == 0) {
            return "Search field cannot be empty";
          } else {
            return null;
          }
        },
      ),
    );
  }
}

class UserWidget extends StatelessWidget {
  final String productName;
  final String price;
  final String imageURL;

  const UserWidget({Key key, this.productName, this.price, this.imageURL})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 670, top: 50.0),
      child: Card(
        elevation: 8,
        child: new Container(
          decoration: new BoxDecoration(
              border: new Border.all(width: 1.0, color: Colors.grey),
              color: Colors.white70),
          margin: new EdgeInsets.symmetric(vertical: 1.0),
          child: Column(
            children: [
              Image.asset(imageURL, height: 20, width: 20),
              Text(productName),
              Text(price),
            ],
          ),
        ),
      ),
    );
  }
}






// import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:nutloop_ecommerce/helper/api.dart';
import 'package:nutloop_ecommerce/provider/products_provider.dart';
import 'package:nutloop_ecommerce/screens/Home/product_detail.dart';
import 'package:provider/provider.dart';
import '../../Auth/constants.dart';
import 'displayBottomSheet.dart';

class FeaturedProduct extends StatefulWidget {

  @override
  _FeaturedProductState createState() => _FeaturedProductState();
}

class _FeaturedProductState extends State<FeaturedProduct> {

  @override
  Widget build(BuildContext context) {
    // Future<List<ProductModel>> getproductBest() =>
    //     ProductsProvider().getproductBestDeals();
    // Future<List<ProductModel>> _future = 
    return FutureBuilder(
        future: Provider.of<ProductsProvider>(context, listen:false).getproductBestDeals(),
        builder: (context, snapshot) {
                if (snapshot.hasData==null || snapshot.data == null)
                      return Center( heightFactor: 2, child: Text('Try Again Later'));
                    else if(snapshot.hasError )
                        return Center( heightFactor: 2, child: Text('Try Again Later'));
                    else
                return Consumer<ProductsProvider>(
                    builder: (context, prod, child) {
                  final products = prod.getProductBestDeal;
               return products == null ? SizedBox():
                   Container(
                    margin: EdgeInsets.all(10.0),
                    height: MediaQuery.of(context).size.height / 3.0,
                    child: ListView.builder(
                      shrinkWrap: true,
                      scrollDirection: Axis.horizontal,
                      itemCount: products == null ? 0 : products.length,
                      itemBuilder: (context, index) {
                        return InkWell(
                         onTap: () {
                            Navigator.push(
                                context,
                                MaterialPageRoute(
                                    builder: (context) => ProductDetails(
                                        products[index].id.toString(),
                                        Api.imageUrl + prod.getImageDeal,
                                       double.parse(Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', ''):products[index].prices.where((e) => e.unitId == 2).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '')),
                                        products[index].name,
                                       products[index].description,
                                       products[index].category.name,
                                       products[index].farm,
                                       products[index].sku,
                                       products[index].freshness,
                                       products[index].deliveryDays,
                                       products[index].deliveryArea,
                                       '${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.abbreviation).toString().replaceAll('(', '').replaceAll(')', ''): "kg"}'
                                       )));
                          },
                          child: Card(
                            shape: RoundedRectangleBorder(
                                borderRadius:
                                    BorderRadius.all(Radius.circular(5.0))),
                            elevation: 1.0,
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: <Widget>[
                                Container(
                                  width:
                                      MediaQuery.of(context).size.width / 2.5,
                                  height:
                                      MediaQuery.of(context).size.height / 5.6,
                                  decoration: BoxDecoration(
                                      borderRadius: BorderRadius.only(
                                          topLeft: Radius.circular(10.0),
                                          topRight: Radius.circular(10.0)),
                                      image: DecorationImage(
                                          image: NetworkImage(
                                              "${Api.imageUrl}${prod.getImageDeal}"),
                                          fit: BoxFit.cover)),
                                ),
                                Container(
                                  width:
                                      MediaQuery.of(context).size.width / 2.5,
                                  height:
                                      MediaQuery.of(context).size.height / 7,
                                  // color: Theme.of(context).primaryColor.withOpacity(.5),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.center,
                                    children: <Widget>[
                                      SizedBox(
                                        height: 20.0,
                                      ),
                                      Text('${products[index].name}',
                                          style: TextStyle(fontSize: 15.0),
                                          overflow: TextOverflow.ellipsis),
                                    Text('#${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', ''):products[index].prices.where((e) => e.unitId == 2).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '')}/${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ?  products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.abbreviation).toString().replaceAll('(', '').replaceAll(')', ''): "kg"}',
                                      // Text('#${products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '')}/${products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.abbreviation).toString().replaceAll('(', '').replaceAll(')', '')}',
                                          style: TextStyle(color: Colors.grey),
                                          overflow: TextOverflow.ellipsis),
                                      Container(
                                          decoration: BoxDecoration(
                                              borderRadius: BorderRadius.all(
                                                  Radius.circular(50.0)),
                                              color: kBrandColor),
                                          margin: EdgeInsets.all(10.0),
                                          height: 35.0,
                                          // ,
                                          child: FlatButton(
                                              onPressed: () {
                                                  displayBottomSheet(
                                                    context,
                                                    products[index].name,
                                                    products[index].id.toString(),
                                                    double.parse(Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', ''):products[index].prices.where((e) => e.unitId == 2).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '')),
                                                    "${Api.imageUrl}${prod.getImageDeal}",
                                                    "${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.abbreviation).toString().replaceAll('(', '').replaceAll(')', ''): "kg"}"
                                                  );
                                                    Provider.of<ProductsProvider>(context, listen: false).setMeasurement("${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.abbreviation).toString().replaceAll('(', '').replaceAll(')', ''): "kg"}");
                                                  },  
                                              child: Text(
                                                'Add to Cart',
                                                style: TextStyle(
                                                    color: Colors.white),
                                              )))
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                        );
                      },
                    ),
                  );
                });
          // }
        });
  }
 

}



// import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:nutloop_ecommerce/helper/api.dart';
import 'package:nutloop_ecommerce/provider/products_provider.dart';
import 'package:nutloop_ecommerce/screens/Home/product_detail.dart';
import 'package:provider/provider.dart';
import '../../Auth/constants.dart';
import 'displayBottomSheet.dart';

class FeaturedProduct extends StatefulWidget {

  @override
  _FeaturedProductState createState() => _FeaturedProductState();
}

class _FeaturedProductState extends State<FeaturedProduct> {

  @override
  Widget build(BuildContext context) {
    // Future<List<ProductModel>> getproductBest() =>
    //     ProductsProvider().getproductBestDeals();
    // Future<List<ProductModel>> _future = 
    final prod = Provider.of<ProductsProvider>(context, listen:false);
    return prod == null || prod.getProductBestDeal == null ? Center(
                child: 
                CupertinoActivityIndicator(
                  radius: 12,
                )): FutureProvider(
        create: (_) => prod.getproductBestDeals(),
        child:  Container(
                    margin: EdgeInsets.all(10.0),
                    height: MediaQuery.of(context).size.height / 3.0,
                    child: ListView.builder(
                      shrinkWrap: true,
                      scrollDirection: Axis.horizontal,
                      itemCount: prod.getProductBestDeal.length == null ? 0 : prod.getProductBestDeal.length,
                      itemBuilder: (context, index) {
                        final products = prod.getProductBestDeal;
                        return InkWell(
                         onTap: () {
                            Navigator.push(
                                context,
                                MaterialPageRoute(
                                    builder: (context) => ProductDetails(
                                        products[index].id.toString(),
                                        Api.imageUrl + prod.getImageDeal,
                                       double.parse(Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', ''):products[index].prices.where((e) => e.unitId == 2).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '')),
                                        products[index].name,
                                       products[index].description,
                                       products[index].category.name,
                                       products[index].farm,
                                       products[index].sku,
                                       products[index].freshness,
                                       products[index].deliveryDays,
                                       products[index].deliveryArea,
                                       '${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.abbreviation).toString().replaceAll('(', '').replaceAll(')', ''): "kg"}'
                                       )));
                          },
                          child: Card(
                            shape: RoundedRectangleBorder(
                                borderRadius:
                                    BorderRadius.all(Radius.circular(5.0))),
                            elevation: 1.0,
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: <Widget>[
                                Container(
                                  width:
                                      MediaQuery.of(context).size.width / 2.5,
                                  height:
                                      MediaQuery.of(context).size.height / 5.6,
                                  decoration: BoxDecoration(
                                      borderRadius: BorderRadius.only(
                                          topLeft: Radius.circular(10.0),
                                          topRight: Radius.circular(10.0)),
                                      image: DecorationImage(
                                          image: NetworkImage(
                                              "${Api.imageUrl}${prod.getImageDeal}"),
                                          fit: BoxFit.cover)),
                                ),
                                Container(
                                  width:
                                      MediaQuery.of(context).size.width / 2.5,
                                  height:
                                      MediaQuery.of(context).size.height / 7,
                                  // color: Theme.of(context).primaryColor.withOpacity(.5),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.center,
                                    children: <Widget>[
                                      SizedBox(
                                        height: 20.0,
                                      ),
                                      Text('${products[index].name}',
                                          style: TextStyle(fontSize: 15.0),
                                          overflow: TextOverflow.ellipsis),
                                    Text('#${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', ''):products[index].prices.where((e) => e.unitId == 2).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '')}/${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ?  products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.abbreviation).toString().replaceAll('(', '').replaceAll(')', ''): "kg"}',
                                      // Text('#${products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '')}/${products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.abbreviation).toString().replaceAll('(', '').replaceAll(')', '')}',
                                          style: TextStyle(color: Colors.grey),
                                          overflow: TextOverflow.ellipsis),
                                      Container(
                                          decoration: BoxDecoration(
                                              borderRadius: BorderRadius.all(
                                                  Radius.circular(50.0)),
                                              color: kBrandColor),
                                          margin: EdgeInsets.all(10.0),
                                          height: 35.0,
                                          // ,
                                          child: FlatButton(
                                              onPressed: () {
                                                  displayBottomSheet(
                                                    context,
                                                    products[index].name,
                                                    products[index].id.toString(),
                                                    double.parse(Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', ''):products[index].prices.where((e) => e.unitId == 2).map((e) => e.priceRegular).toString().replaceAll('(', '').replaceAll(')', '')),
                                                    "${Api.imageUrl}${prod.getImageDeal}",
                                                    "${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.abbreviation).toString().replaceAll('(', '').replaceAll(')', ''): "kg"}"
                                                  );
                                                    Provider.of<ProductsProvider>(context, listen: false).setMeasurement("${Provider.of<ProductsProvider>(context, listen: false).getMeasurement == products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.name).toString().replaceAll('(', '').replaceAll(')', '') ? products[index].prices.where((e) => e.unit.name.toString() == Provider.of<ProductsProvider>(context, listen: false).getMeasurement).map((e) => e.unit.abbreviation).toString().replaceAll('(', '').replaceAll(')', ''): "kg"}");
                                                  },  
                                              child: Text(
                                                'Add to Cart',
                                                style: TextStyle(
                                                    color: Colors.white),
                                              )))
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                        );
                      },
                    ),
                  ));
                // }));
        //   }
        // });
  }
 

}


FutureBuilder(
        future: Provider.of<ProductsProvider>(context, listen:false).getproductBestDeals(),
        builder: (context, snapshot) {
          switch (snapshot.connectionState) { 
            case ConnectionState.waiting:
              return Center(
                child: 
                CupertinoActivityIndicator(
                  radius: 12,
                ),
              );
              // return SizedBox();
            default:
                if (snapshot.hasData==null || snapshot.data == null)
                      return Center( heightFactor: 2, child: Text('Try Again Later'));
                    else if(snapshot.hasError )
                        return Center( heightFactor: 2, child: Text('Try Again Later'));
                    else
                return