import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:nutloop_ecommerce/screens/Auth/constants.dart';
import 'package:nutloop_ecommerce/screens/Home/checkout.dart';
import 'package:nutloop_ecommerce/screens/Home/homepage.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../../provider/cart.dart' show Cart;
import 'widget/cart_item.dart';
import 'checkOutAddCard.dart';
import '../../helper/config_size.dart';

class CartScreen extends StatelessWidget {
  static const routeName = '/cart';

  @override
  Widget build(BuildContext context) {
    final cart = Provider.of<Cart>(context);
    Size size = MediaQuery.of(context).size;
    return Scaffold(
        // appBar: AppBar(
        //   title: Text('Your Cart'),
        // ),
        body: Padding(
      padding: const EdgeInsets.only(top: 20.0),
      child: cart.items.isEmpty
          ? Column(
              children: [
                Container(
                  margin: EdgeInsets.all(8.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Center(
                        child: Text('My Cart',
                            style: TextStyle(
                                color: kPrimaryColor,
                                fontSize: 20.0,
                                fontWeight: FontWeight.bold)),
                      ),
                      
                    ],
                  ),
                ),
                // Spacer(),
                line(context),
                SizedBox(height: size.height * 0.150),
                Expanded(
                  flex: 1,
                  child: Text('Your Cart is Empty', style: TextStyle(fontSize: 20.0),),
                ),
                   Expanded(
                     flex:3,
                                        child: SvgPicture.asset(
                      "asset/cart.svg",
                      height: size.width * 0.330,
                      color: kBrandColor,
                  ),
                   ),
                  // SizedBox(height: size.height * 0.150),
                  Container(
                      margin: EdgeInsets.all(5.0 * SizeConfig.widthMultiplier),
                        width: 95 * SizeConfig.widthMultiplier,
                      padding: EdgeInsets.all(10.0),
                      // width: size.width / 1.2,
                      decoration: BoxDecoration(
                      color: kPrimaryColor,
                      borderRadius: BorderRadius.circular(5.0)),
                      child: FlatButton(
                    onPressed: ()async {
                              SharedPreferences prefs = await SharedPreferences.getInstance();
                                var authNames = prefs.getString('authName');
                      Navigator.push(context, MaterialPageRoute(builder: (context)=>Homepage(authName: authNames)));
                    },
                    child: Text(
                      'Start Shopping',
                      style: TextStyle(color: Colors.white),
                    ),
                      ),
                ),
                SizedBox(height: size.height * 0.020),
              ],
            )
          : Column(
              children: <Widget>[
                Padding(
                  padding: EdgeInsets.symmetric(horizontal: 15, vertical: 8),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: <Widget>[
                      Padding(
                        padding: const EdgeInsets.only(left: 8.0),
                        child: Text(
                          "My Cart",
                          style: TextStyle(
                              fontSize: 20,
                              color: kPrimaryColor,
                              fontWeight: FontWeight.bold),
                        ),
                      ),
                      Spacer(),

                      // Chip(
                      //   // items: Total(Excluding delivery charges)N
                      //   label: Text(
                      //     '${cart.totalAmount}',
                      //     style: TextStyle(color: Theme.of(context).primaryTextTheme.headline6.color),
                      //   ),
                      //   backgroundColor: Theme.of(context).primaryColor,
                      // ),
                      OrderButton(cart: cart)
                    ],
                  ),
                ),
               SizedBox(height: size.height * 0.010),
                Divider(
                  color: Colors.grey,
                  height: 1.0,
                ),
                Align(
                    alignment: Alignment.topLeft,
                    child: Padding(
                      padding: const EdgeInsets.only(
                          left: 20.0, bottom: 5.0, top: 10.0),
                      child: Row(
                        children: [
                          Consumer<Cart>(
                            builder: (_, cartObject, child) => Text(
                                "${cartObject.itemCount.toString()} items: Total(Excluding delivery charges)",
                                style:
                                    TextStyle(fontSize: 13, color: greyColor3)),
                          ),
                          Text("N${cart.totalAmount}",
                              style:
                                  TextStyle(fontSize: 13, color: kBrandColor)),
                        ],
                      ),
                    )),
                Expanded(
                  child: ListView.builder(
                    itemBuilder: (_, index) => CartItem(
                        cart.items.values.toList()[index].id,
                        cart.items.keys.toList()[index],
                        cart.items.values.toList()[index].imageUrl,
                        cart.items.values.toList()[index].price,
                        cart.items.values.toList()[index].quantity,
                        cart.items.values.toList()[index].productName,
                        cart.items.values.toList()[index].measurement),
                    itemCount: cart.items.length,
                  ),
                ),
              ],
            ),
    ));
  }
}

class OrderButton extends StatefulWidget {
  const OrderButton({
    Key key,
    @required this.cart,
  }) : super(key: key);

  final Cart cart;

  @override
  _OrderButtonState createState() => _OrderButtonState();
}

class _OrderButtonState extends State<OrderButton> {
  var _isLoading = false;
  @override
  Widget build(BuildContext context) {
    return FlatButton(
      child: _isLoading
          ? CircularProgressIndicator()
          : Container(
              width: 150,
              decoration: BoxDecoration(
                  color: kPrimaryColor,
                  borderRadius: BorderRadius.circular(10.0)),
              child: FlatButton(
                  onPressed: () {
                    Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => CheckOutPage(
                                  amount: widget.cart.totalAmount,
                                  products: widget.cart.items.values.toList(),
                                )));
                  },
                  child: Text(
                    "Check out",
                    style: TextStyle(color: Colors.white),
                  ))),
      onPressed: (widget.cart.totalAmount <= 0)
          ? null
          : () async {
              setState(() {
                _isLoading = true;
              });

              // await Provider.of<Orders>(context, listen: false).addOrder(
              //     widget.cart.items.values.toList(),
              //     widget.cart.totalAmount
              // );
              setState(() {
                _isLoading = false;
              });
              widget.cart.clearCart();
            },
      textColor: Theme.of(context).primaryColor,
    );
  }
}
